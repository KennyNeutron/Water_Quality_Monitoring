
Water_Quality_Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004b84  08004b84  00005b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c74  08004c74  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c74  08004c74  00005c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c7c  08004c7c  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c7c  08004c7c  00005c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c80  08004c80  00005c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004c84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f0  20000060  08004ce4  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004250  08004ce4  00006250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbce  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002501  00000000  00000000  00013c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00016160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000949  00000000  00000000  00016d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184ee  00000000  00000000  000176d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e173  00000000  00000000  0002fbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a2e2  00000000  00000000  0003dd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8014  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f4  00000000  00000000  000d8058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000db64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b6c 	.word	0x08004b6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004b6c 	.word	0x08004b6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000007c 	.word	0x2000007c
 80005ec:	200000d0 	.word	0x200000d0

080005f0 <PumpCycleOnce>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void PumpCycleOnce(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(&huart2, (uint8_t*)"Turning On Pumps\r\n", strlen("Turning On Pumps\r\n"), HAL_MAX_DELAY);
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2212      	movs	r2, #18
 80005fa:	4918      	ldr	r1, [pc, #96]	@ (800065c <PumpCycleOnce+0x6c>)
 80005fc:	4818      	ldr	r0, [pc, #96]	@ (8000660 <PumpCycleOnce+0x70>)
 80005fe:	f001 ffd9 	bl	80025b4 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //ON Pump 1 (active low)
 8000602:	2200      	movs	r2, #0
 8000604:	2120      	movs	r1, #32
 8000606:	4817      	ldr	r0, [pc, #92]	@ (8000664 <PumpCycleOnce+0x74>)
 8000608:	f001 fad2 	bl	8001bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET); //ON Pump 2 (active low)
 800060c:	2200      	movs	r2, #0
 800060e:	2110      	movs	r1, #16
 8000610:	4814      	ldr	r0, [pc, #80]	@ (8000664 <PumpCycleOnce+0x74>)
 8000612:	f001 facd 	bl	8001bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //ON Pump3 (active high)
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061c:	4812      	ldr	r0, [pc, #72]	@ (8000668 <PumpCycleOnce+0x78>)
 800061e:	f001 fac7 	bl	8001bb0 <HAL_GPIO_WritePin>

  vTaskDelay(pdMS_TO_TICKS(3000)); //delay 3s for now
 8000622:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000626:	f002 fe37 	bl	8003298 <vTaskDelay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //OFF Pump 1 (active low)
 800062a:	2201      	movs	r2, #1
 800062c:	2120      	movs	r1, #32
 800062e:	480d      	ldr	r0, [pc, #52]	@ (8000664 <PumpCycleOnce+0x74>)
 8000630:	f001 fabe 	bl	8001bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); //OFF Pump 2 (active low)
 8000634:	2201      	movs	r2, #1
 8000636:	2110      	movs	r1, #16
 8000638:	480a      	ldr	r0, [pc, #40]	@ (8000664 <PumpCycleOnce+0x74>)
 800063a:	f001 fab9 	bl	8001bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //OFF Pump3 (active high)
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000644:	4808      	ldr	r0, [pc, #32]	@ (8000668 <PumpCycleOnce+0x78>)
 8000646:	f001 fab3 	bl	8001bb0 <HAL_GPIO_WritePin>

  HAL_UART_Transmit(&huart2, (uint8_t*)"Done with Pumps\r\n", strlen("Done with Pumps\r\n"), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	2211      	movs	r2, #17
 8000650:	4906      	ldr	r1, [pc, #24]	@ (800066c <PumpCycleOnce+0x7c>)
 8000652:	4803      	ldr	r0, [pc, #12]	@ (8000660 <PumpCycleOnce+0x70>)
 8000654:	f001 ffae 	bl	80025b4 <HAL_UART_Transmit>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08004b84 	.word	0x08004b84
 8000660:	20000318 	.word	0x20000318
 8000664:	40020800 	.word	0x40020800
 8000668:	40020000 	.word	0x40020000
 800066c:	08004b98 	.word	0x08004b98

08000670 <phSensor_Main>:

static void phSensor_Main(void){
 8000670:	b580      	push	{r7, lr}
 8000672:	b092      	sub	sp, #72	@ 0x48
 8000674:	af00      	add	r7, sp, #0
  char msg[64];
  uint32_t adc_val = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44

  HAL_ADC_Start(&hadc1);
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <phSensor_Main+0x50>)
 800067c:	f000 fcb4 	bl	8000fe8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000680:	f04f 31ff 	mov.w	r1, #4294967295
 8000684:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <phSensor_Main+0x50>)
 8000686:	f000 fd63 	bl	8001150 <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc1);
 800068a:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <phSensor_Main+0x50>)
 800068c:	f000 fdeb 	bl	8001266 <HAL_ADC_GetValue>
 8000690:	6478      	str	r0, [r7, #68]	@ 0x44

  // Optional: convert to voltage: V = (adc_val / 4095.0) * 3.3

  snprintf(msg, sizeof(msg), "pH ADC Raw: %lu\r\n", adc_val);
 8000692:	1d38      	adds	r0, r7, #4
 8000694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000696:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <phSensor_Main+0x54>)
 8000698:	2140      	movs	r1, #64	@ 0x40
 800069a:	f003 fdb3 	bl	8004204 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); //Change to huart6
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fd9d 	bl	80001e0 <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	1d39      	adds	r1, r7, #4
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <phSensor_Main+0x58>)
 80006b2:	f001 ff7f 	bl	80025b4 <HAL_UART_Transmit>
}
 80006b6:	bf00      	nop
 80006b8:	3748      	adds	r7, #72	@ 0x48
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200002d0 	.word	0x200002d0
 80006c4:	08004bac 	.word	0x08004bac
 80006c8:	20000318 	.word	0x20000318

080006cc <doSensor_Main>:

static void doSensor_Main(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b096      	sub	sp, #88	@ 0x58
 80006d0:	af00      	add	r7, sp, #0
  char msg[64];
  uint32_t adc_val = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t millivolts = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	653b      	str	r3, [r7, #80]	@ 0x50

  // Switch ADC channel to A5 (ADC_CHANNEL_5)
  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_5;
 80006e6:	2305      	movs	r3, #5
 80006e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4825      	ldr	r0, [pc, #148]	@ (800078c <doSensor_Main+0xc0>)
 80006f8:	f000 fdc2 	bl	8001280 <HAL_ADC_ConfigChannel>

  // Read raw ADC value
  HAL_ADC_Start(&hadc1);
 80006fc:	4823      	ldr	r0, [pc, #140]	@ (800078c <doSensor_Main+0xc0>)
 80006fe:	f000 fc73 	bl	8000fe8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000702:	f04f 31ff 	mov.w	r1, #4294967295
 8000706:	4821      	ldr	r0, [pc, #132]	@ (800078c <doSensor_Main+0xc0>)
 8000708:	f000 fd22 	bl	8001150 <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc1);
 800070c:	481f      	ldr	r0, [pc, #124]	@ (800078c <doSensor_Main+0xc0>)
 800070e:	f000 fdaa 	bl	8001266 <HAL_ADC_GetValue>
 8000712:	6578      	str	r0, [r7, #84]	@ 0x54

  // Convert to millivolts: (adc_val / 4095) * 3300
  millivolts = (adc_val * 3300) / 4095;
 8000714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000716:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800071a:	fb03 f202 	mul.w	r2, r3, r2
 800071e:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <doSensor_Main+0xc4>)
 8000720:	fba3 1302 	umull	r1, r3, r3, r2
 8000724:	1ad2      	subs	r2, r2, r3
 8000726:	0852      	lsrs	r2, r2, #1
 8000728:	4413      	add	r3, r2
 800072a:	0adb      	lsrs	r3, r3, #11
 800072c:	653b      	str	r3, [r7, #80]	@ 0x50

  //some error
//  snprintf(msg, sizeof(msg), "DO Raw: %lu | DO Voltage: %lu mV", adc_val, do_millisvolts);
//  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  snprintf(msg, sizeof(msg), "DO Raw: %lu | \t", adc_val);
 800072e:	f107 0010 	add.w	r0, r7, #16
 8000732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000734:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <doSensor_Main+0xc8>)
 8000736:	2140      	movs	r1, #64	@ 0x40
 8000738:	f003 fd64 	bl	8004204 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd4d 	bl	80001e0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	f107 0110 	add.w	r1, r7, #16
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	4811      	ldr	r0, [pc, #68]	@ (8000798 <doSensor_Main+0xcc>)
 8000754:	f001 ff2e 	bl	80025b4 <HAL_UART_Transmit>

  snprintf(msg, sizeof(msg), "DO Voltage: %lu mV\r\n", millivolts);
 8000758:	f107 0010 	add.w	r0, r7, #16
 800075c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <doSensor_Main+0xd0>)
 8000760:	2140      	movs	r1, #64	@ 0x40
 8000762:	f003 fd4f 	bl	8004204 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fd38 	bl	80001e0 <strlen>
 8000770:	4603      	mov	r3, r0
 8000772:	b29a      	uxth	r2, r3
 8000774:	f107 0110 	add.w	r1, r7, #16
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	4806      	ldr	r0, [pc, #24]	@ (8000798 <doSensor_Main+0xcc>)
 800077e:	f001 ff19 	bl	80025b4 <HAL_UART_Transmit>

}
 8000782:	bf00      	nop
 8000784:	3758      	adds	r7, #88	@ 0x58
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200002d0 	.word	0x200002d0
 8000790:	00100101 	.word	0x00100101
 8000794:	08004bc0 	.word	0x08004bc0
 8000798:	20000318 	.word	0x20000318
 800079c:	08004bd0 	.word	0x08004bd0

080007a0 <StartDefaultTask>:


void StartDefaultTask(void *argument){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t*)"System Start\r\n", strlen("System Start\r\n"), HAL_MAX_DELAY); //Change to huart6
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	220e      	movs	r2, #14
 80007ae:	490a      	ldr	r1, [pc, #40]	@ (80007d8 <StartDefaultTask+0x38>)
 80007b0:	480a      	ldr	r0, [pc, #40]	@ (80007dc <StartDefaultTask+0x3c>)
 80007b2:	f001 feff 	bl	80025b4 <HAL_UART_Transmit>

  PumpCycleOnce();
 80007b6:	f7ff ff1b 	bl	80005f0 <PumpCycleOnce>



  for(;;)
  {
    phSensor_Main();
 80007ba:	f7ff ff59 	bl	8000670 <phSensor_Main>
    vTaskDelay(pdMS_TO_TICKS(1000));
 80007be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c2:	f002 fd69 	bl	8003298 <vTaskDelay>
    doSensor_Main();
 80007c6:	f7ff ff81 	bl	80006cc <doSensor_Main>
    vTaskDelay(pdMS_TO_TICKS(1000));
 80007ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ce:	f002 fd63 	bl	8003298 <vTaskDelay>
    phSensor_Main();
 80007d2:	bf00      	nop
 80007d4:	e7f1      	b.n	80007ba <StartDefaultTask+0x1a>
 80007d6:	bf00      	nop
 80007d8:	08004be8 	.word	0x08004be8
 80007dc:	20000318 	.word	0x20000318

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 fb49 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f821 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f000 f92f 	bl	8000a50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f2:	f000 f8d9 	bl	80009a8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80007f6:	f000 f901 	bl	80009fc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80007fa:	f000 f883 	bl	8000904 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <main+0x48>)
 8000800:	1d3c      	adds	r4, r7, #4
 8000802:	461d      	mov	r5, r3
 8000804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800080c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f002 faa8 	bl	8002d6a <osThreadCreate>
 800081a:	4603      	mov	r3, r0
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <main+0x4c>)
 800081e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000820:	f002 fa9c 	bl	8002d5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <main+0x44>
 8000828:	08004c04 	.word	0x08004c04
 800082c:	200003a8 	.word	0x200003a8

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	@ 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fd16 	bl	8004270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a27      	ldr	r2, [pc, #156]	@ (80008fc <SystemClock_Config+0xcc>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
 8000864:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <SystemClock_Config+0xcc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <SystemClock_Config+0xd0>)
 800087a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <SystemClock_Config+0xd0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008a0:	2310      	movs	r3, #16
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008aa:	2304      	movs	r3, #4
 80008ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 f994 	bl	8001be4 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008c2:	f000 f94d 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2302      	movs	r3, #2
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2102      	movs	r1, #2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fbf6 	bl	80020d4 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ee:	f000 f937 	bl	8000b60 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	@ 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <MX_ADC1_Init+0x98>)
 8000918:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 800091a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800091c:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_ADC1_Init+0x98>)
 800091e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000922:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000924:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_ADC1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_ADC1_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_ADC1_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_ADC1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_ADC1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_ADC1_Init+0x98>)
 8000946:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <MX_ADC1_Init+0xa0>)
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_ADC1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_ADC1_Init+0x98>)
 8000952:	2201      	movs	r2, #1
 8000954:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_ADC1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_ADC1_Init+0x98>)
 8000960:	2201      	movs	r2, #1
 8000962:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000964:	480d      	ldr	r0, [pc, #52]	@ (800099c <MX_ADC1_Init+0x98>)
 8000966:	f000 fafb 	bl	8000f60 <HAL_ADC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000970:	f000 f8f6 	bl	8000b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000974:	2307      	movs	r3, #7
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_ADC1_Init+0x98>)
 8000986:	f000 fc7b 	bl	8001280 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000990:	f000 f8e6 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200002d0 	.word	0x200002d0
 80009a0:	40012000 	.word	0x40012000
 80009a4:	0f000001 	.word	0x0f000001

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <MX_USART2_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f001 fd98 	bl	8002514 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f8b9 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000318 	.word	0x20000318
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <MX_USART6_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_USART6_UART_Init+0x4c>)
 8000a34:	f001 fd6e 	bl	8002514 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f000 f88f 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000360 	.word	0x20000360
 8000a4c:	40011400 	.word	0x40011400

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a39      	ldr	r2, [pc, #228]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b33      	ldr	r3, [pc, #204]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a32      	ldr	r2, [pc, #200]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b25      	ldr	r3, [pc, #148]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a24      	ldr	r2, [pc, #144]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <MX_GPIO_Init+0x104>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2120      	movs	r1, #32
 8000ada:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <MX_GPIO_Init+0x108>)
 8000adc:	f001 f868 	bl	8001bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae6:	481c      	ldr	r0, [pc, #112]	@ (8000b58 <MX_GPIO_Init+0x108>)
 8000ae8:	f001 f862 	bl	8001bb0 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2130      	movs	r1, #48	@ 0x30
 8000af0:	481a      	ldr	r0, [pc, #104]	@ (8000b5c <MX_GPIO_Init+0x10c>)
 8000af2:	f001 f85d 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000afc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4813      	ldr	r0, [pc, #76]	@ (8000b5c <MX_GPIO_Init+0x10c>)
 8000b0e:	f000 fecb 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8000b12:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <MX_GPIO_Init+0x108>)
 8000b2c:	f000 febc 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b30:	2330      	movs	r3, #48	@ 0x30
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_GPIO_Init+0x10c>)
 8000b48:	f000 feae 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020800 	.word	0x40020800

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_MspInit+0x54>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a11      	ldr	r2, [pc, #68]	@ (8000bc0 <HAL_MspInit+0x54>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_MspInit+0x54>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <HAL_MspInit+0x54>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <HAL_MspInit+0x54>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <HAL_MspInit+0x54>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	210f      	movs	r1, #15
 8000bae:	f06f 0001 	mvn.w	r0, #1
 8000bb2:	f000 fe50 	bl	8001856 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <HAL_ADC_MspInit+0x7c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d127      	bne.n	8000c36 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <HAL_ADC_MspInit+0x80>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a15      	ldr	r2, [pc, #84]	@ (8000c44 <HAL_ADC_MspInit+0x80>)
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <HAL_ADC_MspInit+0x80>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <HAL_ADC_MspInit+0x80>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c44 <HAL_ADC_MspInit+0x80>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <HAL_ADC_MspInit+0x80>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <HAL_ADC_MspInit+0x84>)
 8000c32:	f000 fe39 	bl	80018a8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40012000 	.word	0x40012000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	@ 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a32      	ldr	r2, [pc, #200]	@ (8000d34 <HAL_UART_MspInit+0xe8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12c      	bne.n	8000cc8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a30      	ldr	r2, [pc, #192]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a29      	ldr	r2, [pc, #164]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	481e      	ldr	r0, [pc, #120]	@ (8000d3c <HAL_UART_MspInit+0xf0>)
 8000cc2:	f000 fdf1 	bl	80018a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cc6:	e030      	b.n	8000d2a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d40 <HAL_UART_MspInit+0xf4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12b      	bne.n	8000d2a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_UART_MspInit+0xec>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0a:	23c0      	movs	r3, #192	@ 0xc0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	@ (8000d44 <HAL_UART_MspInit+0xf8>)
 8000d26:	f000 fdbf 	bl	80018a8 <HAL_GPIO_Init>
}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	@ 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40004400 	.word	0x40004400
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40011400 	.word	0x40011400
 8000d44:	40020800 	.word	0x40020800

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x4>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f8cd 	bl	8000f20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d86:	f002 fdb7 	bl	80038f8 <xTaskGetSchedulerState>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d001      	beq.n	8000d94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d90:	f002 fffa 	bl	8003d88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	@ (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f003 fa5a 	bl	8004280 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20020000 	.word	0x20020000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	200003ac 	.word	0x200003ac
 8000e00:	20004250 	.word	0x20004250

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f003 fa19 	bl	800428c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fcc1 	bl	80007e0 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e6c:	08004c84 	.word	0x08004c84
  ldr r2, =_sbss
 8000e70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e74:	20004250 	.word	0x20004250

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 fccb 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe5c 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fcd5 	bl	800188e <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 fcab 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	200003b0 	.word	0x200003b0

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200003b0 	.word	0x200003b0

08000f60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e033      	b.n	8000fde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fe20 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fa6:	f023 0302 	bic.w	r3, r3, #2
 8000faa:	f043 0202 	orr.w	r2, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fa96 	bl	80014e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f023 0303 	bic.w	r3, r3, #3
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fce:	e001      	b.n	8000fd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_ADC_Start+0x1a>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e097      	b.n	8001132 <HAL_ADC_Start+0x14a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d018      	beq.n	800104a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001028:	4b45      	ldr	r3, [pc, #276]	@ (8001140 <HAL_ADC_Start+0x158>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a45      	ldr	r2, [pc, #276]	@ (8001144 <HAL_ADC_Start+0x15c>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0c9a      	lsrs	r2, r3, #18
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800103c:	e002      	b.n	8001044 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	3b01      	subs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f9      	bne.n	800103e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b01      	cmp	r3, #1
 8001056:	d15f      	bne.n	8001118 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001082:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001096:	d106      	bne.n	80010a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109c:	f023 0206 	bic.w	r2, r3, #6
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80010a4:	e002      	b.n	80010ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010b4:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <HAL_ADC_Start+0x160>)
 80010b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010c0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 031f 	and.w	r3, r3, #31
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10f      	bne.n	80010ee <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d129      	bne.n	8001130 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	e020      	b.n	8001130 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a16      	ldr	r2, [pc, #88]	@ (800114c <HAL_ADC_Start+0x164>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d11b      	bne.n	8001130 <HAL_ADC_Start+0x148>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d114      	bne.n	8001130 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	e00b      	b.n	8001130 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f043 0210 	orr.w	r2, r3, #16
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000000 	.word	0x20000000
 8001144:	431bde83 	.word	0x431bde83
 8001148:	40012300 	.word	0x40012300
 800114c:	40012000 	.word	0x40012000

08001150 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800116c:	d113      	bne.n	8001196 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800117c:	d10b      	bne.n	8001196 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f043 0220 	orr.w	r2, r3, #32
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e063      	b.n	800125e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001196:	f7ff fed7 	bl	8000f48 <HAL_GetTick>
 800119a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800119c:	e021      	b.n	80011e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d01d      	beq.n	80011e2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_ADC_PollForConversion+0x6c>
 80011ac:	f7ff fecc 	bl	8000f48 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d212      	bcs.n	80011e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d00b      	beq.n	80011e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f043 0204 	orr.w	r2, r3, #4
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e03d      	b.n	800125e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d1d6      	bne.n	800119e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f06f 0212 	mvn.w	r2, #18
 80011f8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d123      	bne.n	800125c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001218:	2b00      	cmp	r3, #0
 800121a:	d11f      	bne.n	800125c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001222:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001234:	2b00      	cmp	r3, #0
 8001236:	d111      	bne.n	800125c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f043 0201 	orr.w	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1c>
 8001298:	2302      	movs	r3, #2
 800129a:	e113      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x244>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d925      	bls.n	80012f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68d9      	ldr	r1, [r3, #12]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	3b1e      	subs	r3, #30
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43da      	mvns	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	400a      	ands	r2, r1
 80012d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68d9      	ldr	r1, [r3, #12]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	4603      	mov	r3, r0
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4403      	add	r3, r0
 80012ea:	3b1e      	subs	r3, #30
 80012ec:	409a      	lsls	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	e022      	b.n	800133e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6919      	ldr	r1, [r3, #16]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	2207      	movs	r2, #7
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	400a      	ands	r2, r1
 800131a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6919      	ldr	r1, [r3, #16]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	4603      	mov	r3, r0
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4403      	add	r3, r0
 8001334:	409a      	lsls	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b06      	cmp	r3, #6
 8001344:	d824      	bhi.n	8001390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3b05      	subs	r3, #5
 8001358:	221f      	movs	r2, #31
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b05      	subs	r3, #5
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	@ 0x34
 800138e:	e04c      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d824      	bhi.n	80013e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b23      	subs	r3, #35	@ 0x23
 80013aa:	221f      	movs	r2, #31
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b23      	subs	r3, #35	@ 0x23
 80013d4:	fa00 f203 	lsl.w	r2, r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e0:	e023      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3b41      	subs	r3, #65	@ 0x41
 80013f4:	221f      	movs	r2, #31
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b41      	subs	r3, #65	@ 0x41
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142a:	4b29      	ldr	r3, [pc, #164]	@ (80014d0 <HAL_ADC_ConfigChannel+0x250>)
 800142c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a28      	ldr	r2, [pc, #160]	@ (80014d4 <HAL_ADC_ConfigChannel+0x254>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d10f      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1d8>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d10b      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1d      	ldr	r2, [pc, #116]	@ (80014d4 <HAL_ADC_ConfigChannel+0x254>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12b      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x23a>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1c      	ldr	r2, [pc, #112]	@ (80014d8 <HAL_ADC_ConfigChannel+0x258>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_ADC_ConfigChannel+0x1f4>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b11      	cmp	r3, #17
 8001472:	d122      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <HAL_ADC_ConfigChannel+0x258>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d111      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_ADC_ConfigChannel+0x25c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a11      	ldr	r2, [pc, #68]	@ (80014e0 <HAL_ADC_ConfigChannel+0x260>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	0c9a      	lsrs	r2, r3, #18
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014ac:	e002      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40012300 	.word	0x40012300
 80014d4:	40012000 	.word	0x40012000
 80014d8:	10000012 	.word	0x10000012
 80014dc:	20000000 	.word	0x20000000
 80014e0:	431bde83 	.word	0x431bde83

080014e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ec:	4b79      	ldr	r3, [pc, #484]	@ (80016d4 <ADC_Init+0x1f0>)
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	431a      	orrs	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	021a      	lsls	r2, r3, #8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800153c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6899      	ldr	r1, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	4a58      	ldr	r2, [pc, #352]	@ (80016d8 <ADC_Init+0x1f4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d022      	beq.n	80015c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800158a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6899      	ldr	r1, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6899      	ldr	r1, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	e00f      	b.n	80015e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0202 	bic.w	r2, r2, #2
 80015f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e1b      	ldrb	r3, [r3, #24]
 80015fc:	005a      	lsls	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800161e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800162e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6859      	ldr	r1, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163a:	3b01      	subs	r3, #1
 800163c:	035a      	lsls	r2, r3, #13
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	e007      	b.n	8001658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001656:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	051a      	lsls	r2, r3, #20
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800168c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6899      	ldr	r1, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800169a:	025a      	lsls	r2, r3, #9
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	029a      	lsls	r2, r3, #10
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40012300 	.word	0x40012300
 80016d8:	0f000001 	.word	0x0f000001

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	@ (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff47 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff5c 	bl	8001724 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffb0 	bl	80017fc <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	e159      	b.n	8001b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f040 8148 	bne.w	8001b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d005      	beq.n	80018fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d130      	bne.n	800195c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 0201 	and.w	r2, r3, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b03      	cmp	r3, #3
 8001966:	d017      	beq.n	8001998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d123      	bne.n	80019ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0203 	and.w	r2, r3, #3
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a2 	beq.w	8001b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b57      	ldr	r3, [pc, #348]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3e:	4b54      	ldr	r3, [pc, #336]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4a:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a49      	ldr	r2, [pc, #292]	@ (8001b98 <HAL_GPIO_Init+0x2f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x202>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a48      	ldr	r2, [pc, #288]	@ (8001b9c <HAL_GPIO_Init+0x2f4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x1fe>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a47      	ldr	r2, [pc, #284]	@ (8001ba0 <HAL_GPIO_Init+0x2f8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a46      	ldr	r2, [pc, #280]	@ (8001ba4 <HAL_GPIO_Init+0x2fc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x1f6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a45      	ldr	r2, [pc, #276]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x1f2>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	@ (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a24      	ldr	r2, [pc, #144]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1e:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b42:	4a1a      	ldr	r2, [pc, #104]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f aea2 	bls.w	80018c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e267      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d075      	beq.n	8001cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c02:	4b88      	ldr	r3, [pc, #544]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d00c      	beq.n	8001c28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0e:	4b85      	ldr	r3, [pc, #532]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d112      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1a:	4b82      	ldr	r3, [pc, #520]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c26:	d10b      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	4b7e      	ldr	r3, [pc, #504]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d05b      	beq.n	8001cec <HAL_RCC_OscConfig+0x108>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d157      	bne.n	8001cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e242      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c48:	d106      	bne.n	8001c58 <HAL_RCC_OscConfig+0x74>
 8001c4a:	4b76      	ldr	r3, [pc, #472]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xb0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b70      	ldr	r3, [pc, #448]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6f      	ldr	r2, [pc, #444]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6c      	ldr	r2, [pc, #432]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	4b69      	ldr	r3, [pc, #420]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a68      	ldr	r2, [pc, #416]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b66      	ldr	r3, [pc, #408]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a65      	ldr	r2, [pc, #404]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f954 	bl	8000f48 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f950 	bl	8000f48 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	@ 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e207      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xc0>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff f940 	bl	8000f48 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff f93c 	bl	8000f48 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1f3      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b51      	ldr	r3, [pc, #324]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0xe8>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d06:	4b47      	ldr	r3, [pc, #284]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d12:	4b44      	ldr	r3, [pc, #272]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	4b41      	ldr	r3, [pc, #260]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x152>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e1c7      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b3b      	ldr	r3, [pc, #236]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4937      	ldr	r1, [pc, #220]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	e03a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d54:	4b34      	ldr	r3, [pc, #208]	@ (8001e28 <HAL_RCC_OscConfig+0x244>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7ff f8f5 	bl	8000f48 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff f8f1 	bl	8000f48 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e1a8      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b28      	ldr	r3, [pc, #160]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4925      	ldr	r1, [pc, #148]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <HAL_RCC_OscConfig+0x244>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f8d4 	bl	8000f48 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff f8d0 	bl	8000f48 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e187      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d036      	beq.n	8001e3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d016      	beq.n	8001e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_RCC_OscConfig+0x248>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff f8b4 	bl	8000f48 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff f8b0 	bl	8000f48 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e167      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x200>
 8001e02:	e01b      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e04:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_RCC_OscConfig+0x248>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff f89d 	bl	8000f48 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	e00e      	b.n	8001e30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e12:	f7ff f899 	bl	8000f48 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d907      	bls.n	8001e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e150      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
 8001e24:	40023800 	.word	0x40023800
 8001e28:	42470000 	.word	0x42470000
 8001e2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ea      	bne.n	8001e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8097 	beq.w	8001f78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b81      	ldr	r3, [pc, #516]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a7c      	ldr	r2, [pc, #496]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b77      	ldr	r3, [pc, #476]	@ (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b74      	ldr	r3, [pc, #464]	@ (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a73      	ldr	r2, [pc, #460]	@ (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7ff f859 	bl	8000f48 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7ff f855 	bl	8000f48 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e10c      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b6a      	ldr	r3, [pc, #424]	@ (8002058 <HAL_RCC_OscConfig+0x474>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x2ea>
 8001ec0:	4b64      	ldr	r3, [pc, #400]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec4:	4a63      	ldr	r2, [pc, #396]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x324>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x30c>
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	4a5e      	ldr	r2, [pc, #376]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0x324>
 8001ef0:	4b58      	ldr	r3, [pc, #352]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef4:	4a57      	ldr	r2, [pc, #348]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efc:	4b55      	ldr	r3, [pc, #340]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4a54      	ldr	r2, [pc, #336]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff f81a 	bl	8000f48 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7ff f816 	bl	8000f48 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0cb      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	4b49      	ldr	r3, [pc, #292]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0ee      	beq.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f804 	bl	8000f48 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7ff f800 	bl	8000f48 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0b5      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1ee      	bne.n	8001f44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	4a38      	ldr	r2, [pc, #224]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a1 	beq.w	80020c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f82:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d05c      	beq.n	8002048 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d141      	bne.n	800201a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b31      	ldr	r3, [pc, #196]	@ (800205c <HAL_RCC_OscConfig+0x478>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ffd4 	bl	8000f48 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7fe ffd0 	bl	8000f48 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e087      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	491b      	ldr	r1, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_RCC_OscConfig+0x478>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe ffa9 	bl	8000f48 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7fe ffa5 	bl	8000f48 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e05c      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x416>
 8002018:	e054      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <HAL_RCC_OscConfig+0x478>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe ff92 	bl	8000f48 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7fe ff8e 	bl	8000f48 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e045      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
 8002046:	e03d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e038      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
 8002054:	40023800 	.word	0x40023800
 8002058:	40007000 	.word	0x40007000
 800205c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <HAL_RCC_OscConfig+0x4ec>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d028      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d121      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d11a      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002096:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002098:	4293      	cmp	r3, r2
 800209a:	d111      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	3b01      	subs	r3, #1
 80020aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0cc      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b68      	ldr	r3, [pc, #416]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d90c      	bls.n	8002110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b65      	ldr	r3, [pc, #404]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b63      	ldr	r3, [pc, #396]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b8      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002128:	4b59      	ldr	r3, [pc, #356]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a58      	ldr	r2, [pc, #352]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002132:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002140:	4b53      	ldr	r3, [pc, #332]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a52      	ldr	r2, [pc, #328]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800214a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b50      	ldr	r3, [pc, #320]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	494d      	ldr	r1, [pc, #308]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d044      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d119      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d003      	beq.n	8002192 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	2b03      	cmp	r3, #3
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b3f      	ldr	r3, [pc, #252]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e067      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4934      	ldr	r1, [pc, #208]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7fe fec0 	bl	8000f48 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7fe febc 	bl	8000f48 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e04f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b25      	ldr	r3, [pc, #148]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d20c      	bcs.n	800221c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b22      	ldr	r3, [pc, #136]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e032      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4916      	ldr	r1, [pc, #88]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002246:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	490e      	ldr	r1, [pc, #56]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225a:	f000 f821 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800225e:	4602      	mov	r2, r0
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	490a      	ldr	r1, [pc, #40]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	5ccb      	ldrb	r3, [r1, r3]
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fe20 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023c00 	.word	0x40023c00
 8002290:	40023800 	.word	0x40023800
 8002294:	08004c28 	.word	0x08004c28
 8002298:	20000000 	.word	0x20000000
 800229c:	20000004 	.word	0x20000004

080022a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a4:	b094      	sub	sp, #80	@ 0x50
 80022a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b8:	4b79      	ldr	r3, [pc, #484]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d00d      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x40>
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	f200 80e1 	bhi.w	800248c <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x3a>
 80022d2:	e0db      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b73      	ldr	r3, [pc, #460]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022d8:	e0db      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022da:	4b73      	ldr	r3, [pc, #460]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80022dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022de:	e0d8      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e0:	4b6f      	ldr	r3, [pc, #444]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ea:	4b6d      	ldr	r3, [pc, #436]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	4b6a      	ldr	r3, [pc, #424]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	2200      	movs	r2, #0
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002300:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002308:	633b      	str	r3, [r7, #48]	@ 0x30
 800230a:	2300      	movs	r3, #0
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
 800230e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002312:	4622      	mov	r2, r4
 8002314:	462b      	mov	r3, r5
 8002316:	f04f 0000 	mov.w	r0, #0
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	0159      	lsls	r1, r3, #5
 8002320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002324:	0150      	lsls	r0, r2, #5
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4621      	mov	r1, r4
 800232c:	1a51      	subs	r1, r2, r1
 800232e:	6139      	str	r1, [r7, #16]
 8002330:	4629      	mov	r1, r5
 8002332:	eb63 0301 	sbc.w	r3, r3, r1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002344:	4659      	mov	r1, fp
 8002346:	018b      	lsls	r3, r1, #6
 8002348:	4651      	mov	r1, sl
 800234a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800234e:	4651      	mov	r1, sl
 8002350:	018a      	lsls	r2, r1, #6
 8002352:	4651      	mov	r1, sl
 8002354:	ebb2 0801 	subs.w	r8, r2, r1
 8002358:	4659      	mov	r1, fp
 800235a:	eb63 0901 	sbc.w	r9, r3, r1
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800236a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800236e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002372:	4690      	mov	r8, r2
 8002374:	4699      	mov	r9, r3
 8002376:	4623      	mov	r3, r4
 8002378:	eb18 0303 	adds.w	r3, r8, r3
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	462b      	mov	r3, r5
 8002380:	eb49 0303 	adc.w	r3, r9, r3
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002392:	4629      	mov	r1, r5
 8002394:	024b      	lsls	r3, r1, #9
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800239c:	4621      	mov	r1, r4
 800239e:	024a      	lsls	r2, r1, #9
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a6:	2200      	movs	r2, #0
 80023a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023b0:	f7fd ff6e 	bl	8000290 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023bc:	e058      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	2200      	movs	r2, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	4611      	mov	r1, r2
 80023ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023d8:	4642      	mov	r2, r8
 80023da:	464b      	mov	r3, r9
 80023dc:	f04f 0000 	mov.w	r0, #0
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	0159      	lsls	r1, r3, #5
 80023e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ea:	0150      	lsls	r0, r2, #5
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4641      	mov	r1, r8
 80023f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80023f6:	4649      	mov	r1, r9
 80023f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002408:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800240c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002410:	ebb2 040a 	subs.w	r4, r2, sl
 8002414:	eb63 050b 	sbc.w	r5, r3, fp
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	00eb      	lsls	r3, r5, #3
 8002422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002426:	00e2      	lsls	r2, r4, #3
 8002428:	4614      	mov	r4, r2
 800242a:	461d      	mov	r5, r3
 800242c:	4643      	mov	r3, r8
 800242e:	18e3      	adds	r3, r4, r3
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	464b      	mov	r3, r9
 8002434:	eb45 0303 	adc.w	r3, r5, r3
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002446:	4629      	mov	r1, r5
 8002448:	028b      	lsls	r3, r1, #10
 800244a:	4621      	mov	r1, r4
 800244c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002450:	4621      	mov	r1, r4
 8002452:	028a      	lsls	r2, r1, #10
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800245a:	2200      	movs	r2, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	61fa      	str	r2, [r7, #28]
 8002460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002464:	f7fd ff14 	bl	8000290 <__aeabi_uldivmod>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4613      	mov	r3, r2
 800246e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	3301      	adds	r3, #1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002480:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800248a:	e002      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800248e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002494:	4618      	mov	r0, r3
 8002496:	3750      	adds	r7, #80	@ 0x50
 8002498:	46bd      	mov	sp, r7
 800249a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	007a1200 	.word	0x007a1200

080024ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000000 	.word	0x20000000

080024c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024c8:	f7ff fff0 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0a9b      	lsrs	r3, r3, #10
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4903      	ldr	r1, [pc, #12]	@ (80024e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	08004c38 	.word	0x08004c38

080024ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024f0:	f7ff ffdc 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0b5b      	lsrs	r3, r3, #13
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4903      	ldr	r1, [pc, #12]	@ (8002510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	08004c38 	.word	0x08004c38

08002514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e042      	b.n	80025ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fb86 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	@ 0x24
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f973 	bl	8002844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800256c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800257c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800258c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d175      	bne.n	80026c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_UART_Transmit+0x2c>
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e06e      	b.n	80026c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2221      	movs	r2, #33	@ 0x21
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f2:	f7fe fca9 	bl	8000f48 <HAL_GetTick>
 80025f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260c:	d108      	bne.n	8002620 <HAL_UART_Transmit+0x6c>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e003      	b.n	8002628 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002628:	e02e      	b.n	8002688 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	2180      	movs	r1, #128	@ 0x80
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f848 	bl	80026ca <UART_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e03a      	b.n	80026c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	3302      	adds	r3, #2
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	e007      	b.n	800267a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3301      	adds	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1cb      	bne.n	800262a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	2140      	movs	r1, #64	@ 0x40
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f814 	bl	80026ca <UART_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e006      	b.n	80026c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	e000      	b.n	80026c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026da:	e03b      	b.n	8002754 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	d037      	beq.n	8002754 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e4:	f7fe fc30 	bl	8000f48 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	6a3a      	ldr	r2, [r7, #32]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d302      	bcc.n	80026fa <UART_WaitOnFlagUntilTimeout+0x30>
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e03a      	b.n	8002774 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d023      	beq.n	8002754 <UART_WaitOnFlagUntilTimeout+0x8a>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b80      	cmp	r3, #128	@ 0x80
 8002710:	d020      	beq.n	8002754 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b40      	cmp	r3, #64	@ 0x40
 8002716:	d01d      	beq.n	8002754 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b08      	cmp	r3, #8
 8002724:	d116      	bne.n	8002754 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f81d 	bl	800277c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2208      	movs	r2, #8
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e00f      	b.n	8002774 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4013      	ands	r3, r2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	429a      	cmp	r2, r3
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	429a      	cmp	r2, r3
 8002770:	d0b4      	beq.n	80026dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800277c:	b480      	push	{r7}
 800277e:	b095      	sub	sp, #84	@ 0x54
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278e:	e853 3f00 	ldrex	r3, [r3]
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800279a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80027a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e5      	bne.n	8002784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3314      	adds	r3, #20
 80027be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3314      	adds	r3, #20
 80027d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027e0:	e841 2300 	strex	r3, r2, [r1]
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e5      	bne.n	80027b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d119      	bne.n	8002828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	e853 3f00 	ldrex	r3, [r3]
 8002802:	60bb      	str	r3, [r7, #8]
   return(result);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f023 0310 	bic.w	r3, r3, #16
 800280a:	647b      	str	r3, [r7, #68]	@ 0x44
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002814:	61ba      	str	r2, [r7, #24]
 8002816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002818:	6979      	ldr	r1, [r7, #20]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	e841 2300 	strex	r3, r2, [r1]
 8002820:	613b      	str	r3, [r7, #16]
   return(result);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e5      	bne.n	80027f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002836:	bf00      	nop
 8002838:	3754      	adds	r7, #84	@ 0x54
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b0c0      	sub	sp, #256	@ 0x100
 800284a:	af00      	add	r7, sp, #0
 800284c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	68d9      	ldr	r1, [r3, #12]
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	ea40 0301 	orr.w	r3, r0, r1
 800286c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	431a      	orrs	r2, r3
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	431a      	orrs	r2, r3
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800289c:	f021 010c 	bic.w	r1, r1, #12
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028aa:	430b      	orrs	r3, r1
 80028ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028be:	6999      	ldr	r1, [r3, #24]
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	ea40 0301 	orr.w	r3, r0, r1
 80028ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b10 <UART_SetConfig+0x2cc>)
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d005      	beq.n	80028e4 <UART_SetConfig+0xa0>
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b8d      	ldr	r3, [pc, #564]	@ (8002b14 <UART_SetConfig+0x2d0>)
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d104      	bne.n	80028ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028e4:	f7ff fe02 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 80028e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028ec:	e003      	b.n	80028f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028ee:	f7ff fde9 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 80028f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002900:	f040 810c 	bne.w	8002b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002908:	2200      	movs	r2, #0
 800290a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800290e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	1891      	adds	r1, r2, r2
 800291c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800291e:	415b      	adcs	r3, r3
 8002920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002926:	4621      	mov	r1, r4
 8002928:	eb12 0801 	adds.w	r8, r2, r1
 800292c:	4629      	mov	r1, r5
 800292e:	eb43 0901 	adc.w	r9, r3, r1
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800293e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002946:	4690      	mov	r8, r2
 8002948:	4699      	mov	r9, r3
 800294a:	4623      	mov	r3, r4
 800294c:	eb18 0303 	adds.w	r3, r8, r3
 8002950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002954:	462b      	mov	r3, r5
 8002956:	eb49 0303 	adc.w	r3, r9, r3
 800295a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800296a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800296e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002972:	460b      	mov	r3, r1
 8002974:	18db      	adds	r3, r3, r3
 8002976:	653b      	str	r3, [r7, #80]	@ 0x50
 8002978:	4613      	mov	r3, r2
 800297a:	eb42 0303 	adc.w	r3, r2, r3
 800297e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002988:	f7fd fc82 	bl	8000290 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4b61      	ldr	r3, [pc, #388]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002992:	fba3 2302 	umull	r2, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	011c      	lsls	r4, r3, #4
 800299a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029ac:	4642      	mov	r2, r8
 80029ae:	464b      	mov	r3, r9
 80029b0:	1891      	adds	r1, r2, r2
 80029b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029b4:	415b      	adcs	r3, r3
 80029b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029bc:	4641      	mov	r1, r8
 80029be:	eb12 0a01 	adds.w	sl, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb43 0b01 	adc.w	fp, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029dc:	4692      	mov	sl, r2
 80029de:	469b      	mov	fp, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	eb1a 0303 	adds.w	r3, sl, r3
 80029e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029ea:	464b      	mov	r3, r9
 80029ec:	eb4b 0303 	adc.w	r3, fp, r3
 80029f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	18db      	adds	r3, r3, r3
 8002a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a0e:	4613      	mov	r3, r2
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a1e:	f7fd fc37 	bl	8000290 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	4b3b      	ldr	r3, [pc, #236]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2264      	movs	r2, #100	@ 0x64
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	1acb      	subs	r3, r1, r3
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a3e:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002a40:	fba3 2302 	umull	r2, r3, r3, r2
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a4c:	441c      	add	r4, r3
 8002a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a60:	4642      	mov	r2, r8
 8002a62:	464b      	mov	r3, r9
 8002a64:	1891      	adds	r1, r2, r2
 8002a66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a68:	415b      	adcs	r3, r3
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a70:	4641      	mov	r1, r8
 8002a72:	1851      	adds	r1, r2, r1
 8002a74:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a76:	4649      	mov	r1, r9
 8002a78:	414b      	adcs	r3, r1
 8002a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a88:	4659      	mov	r1, fp
 8002a8a:	00cb      	lsls	r3, r1, #3
 8002a8c:	4651      	mov	r1, sl
 8002a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a92:	4651      	mov	r1, sl
 8002a94:	00ca      	lsls	r2, r1, #3
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4642      	mov	r2, r8
 8002a9e:	189b      	adds	r3, r3, r2
 8002aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	460a      	mov	r2, r1
 8002aa8:	eb42 0303 	adc.w	r3, r2, r3
 8002aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002abc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	18db      	adds	r3, r3, r3
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aca:	4613      	mov	r3, r2
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ada:	f7fd fbd9 	bl	8000290 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	2164      	movs	r1, #100	@ 0x64
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3332      	adds	r3, #50	@ 0x32
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4422      	add	r2, r4
 8002b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b0c:	e106      	b.n	8002d1c <UART_SetConfig+0x4d8>
 8002b0e:	bf00      	nop
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40011400 	.word	0x40011400
 8002b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b2e:	4642      	mov	r2, r8
 8002b30:	464b      	mov	r3, r9
 8002b32:	1891      	adds	r1, r2, r2
 8002b34:	6239      	str	r1, [r7, #32]
 8002b36:	415b      	adcs	r3, r3
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b3e:	4641      	mov	r1, r8
 8002b40:	1854      	adds	r4, r2, r1
 8002b42:	4649      	mov	r1, r9
 8002b44:	eb43 0501 	adc.w	r5, r3, r1
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	00eb      	lsls	r3, r5, #3
 8002b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b56:	00e2      	lsls	r2, r4, #3
 8002b58:	4614      	mov	r4, r2
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	18e3      	adds	r3, r4, r3
 8002b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b64:	464b      	mov	r3, r9
 8002b66:	eb45 0303 	adc.w	r3, r5, r3
 8002b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	008b      	lsls	r3, r1, #2
 8002b8e:	4621      	mov	r1, r4
 8002b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b94:	4621      	mov	r1, r4
 8002b96:	008a      	lsls	r2, r1, #2
 8002b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b9c:	f7fd fb78 	bl	8000290 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4b60      	ldr	r3, [pc, #384]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	011c      	lsls	r4, r3, #4
 8002bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	1891      	adds	r1, r2, r2
 8002bc6:	61b9      	str	r1, [r7, #24]
 8002bc8:	415b      	adcs	r3, r3
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	1851      	adds	r1, r2, r1
 8002bd4:	6139      	str	r1, [r7, #16]
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	414b      	adcs	r3, r1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be8:	4659      	mov	r1, fp
 8002bea:	00cb      	lsls	r3, r1, #3
 8002bec:	4651      	mov	r1, sl
 8002bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	00ca      	lsls	r2, r1, #3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	189b      	adds	r3, r3, r2
 8002c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c04:	464b      	mov	r3, r9
 8002c06:	460a      	mov	r2, r1
 8002c08:	eb42 0303 	adc.w	r3, r2, r3
 8002c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c28:	4649      	mov	r1, r9
 8002c2a:	008b      	lsls	r3, r1, #2
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c32:	4641      	mov	r1, r8
 8002c34:	008a      	lsls	r2, r1, #2
 8002c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c3a:	f7fd fb29 	bl	8000290 <__aeabi_uldivmod>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002c46:	fba3 2301 	umull	r2, r3, r3, r1
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2264      	movs	r2, #100	@ 0x64
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	1acb      	subs	r3, r1, r3
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	3332      	adds	r3, #50	@ 0x32
 8002c58:	4a33      	ldr	r2, [pc, #204]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c64:	441c      	add	r4, r3
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	1891      	adds	r1, r2, r2
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	415b      	adcs	r3, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c84:	4641      	mov	r1, r8
 8002c86:	1851      	adds	r1, r2, r1
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	414b      	adcs	r3, r1
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c9c:	4659      	mov	r1, fp
 8002c9e:	00cb      	lsls	r3, r1, #3
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	00ca      	lsls	r2, r1, #3
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	460a      	mov	r2, r1
 8002cba:	eb42 0303 	adc.w	r3, r2, r3
 8002cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cca:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cd8:	4649      	mov	r1, r9
 8002cda:	008b      	lsls	r3, r1, #2
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	008a      	lsls	r2, r1, #2
 8002ce6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cea:	f7fd fad1 	bl	8000290 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	2164      	movs	r1, #100	@ 0x64
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	3332      	adds	r3, #50	@ 0x32
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4422      	add	r2, r4
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d22:	46bd      	mov	sp, r7
 8002d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d28:	51eb851f 	.word	0x51eb851f

08002d2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3e:	2b84      	cmp	r3, #132	@ 0x84
 8002d40:	d005      	beq.n	8002d4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3303      	adds	r3, #3
 8002d4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d60:	f000 fad0 	bl	8003304 <vTaskStartScheduler>
  
  return osOK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6c:	b089      	sub	sp, #36	@ 0x24
 8002d6e:	af04      	add	r7, sp, #16
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <osThreadCreate+0x54>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01c      	beq.n	8002dbe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685c      	ldr	r4, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691e      	ldr	r6, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ffc8 	bl	8002d2c <makeFreeRtosPriority>
 8002d9c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002da6:	9202      	str	r2, [sp, #8]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	9100      	str	r1, [sp, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4632      	mov	r2, r6
 8002db0:	4629      	mov	r1, r5
 8002db2:	4620      	mov	r0, r4
 8002db4:	f000 f8d9 	bl	8002f6a <xTaskCreateStatic>
 8002db8:	4603      	mov	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e01c      	b.n	8002df8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685c      	ldr	r4, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ffaa 	bl	8002d2c <makeFreeRtosPriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f107 030c 	add.w	r3, r7, #12
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	9200      	str	r2, [sp, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	4632      	mov	r2, r6
 8002de6:	4629      	mov	r1, r5
 8002de8:	4620      	mov	r0, r4
 8002dea:	f000 f91e 	bl	800302a <xTaskCreate>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d001      	beq.n	8002df8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002df8:	68fb      	ldr	r3, [r7, #12]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f103 0208 	add.w	r2, r3, #8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f103 0208 	add.w	r2, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f103 0208 	add.w	r2, r3, #8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	601a      	str	r2, [r3, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d103      	bne.n	8002ec4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	e00c      	b.n	8002ede <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	e002      	b.n	8002ed2 <vListInsert+0x2e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d2f6      	bcs.n	8002ecc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6852      	ldr	r2, [r2, #4]
 8002f36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d103      	bne.n	8002f4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b08e      	sub	sp, #56	@ 0x38
 8002f6e:	af04      	add	r7, sp, #16
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	e7fd      	b.n	8002f92 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61fb      	str	r3, [r7, #28]
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fb4:	2354      	movs	r3, #84	@ 0x54
 8002fb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b54      	cmp	r3, #84	@ 0x54
 8002fbc:	d00b      	beq.n	8002fd6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	61bb      	str	r3, [r7, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	e7fd      	b.n	8002fd2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01e      	beq.n	800301c <xTaskCreateStatic+0xb2>
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01b      	beq.n	800301c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9303      	str	r3, [sp, #12]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	9302      	str	r3, [sp, #8]
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f850 	bl	80030b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003014:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003016:	f000 f8d5 	bl	80031c4 <prvAddNewTaskToReadyList>
 800301a:	e001      	b.n	8003020 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003020:	697b      	ldr	r3, [r7, #20]
	}
 8003022:	4618      	mov	r0, r3
 8003024:	3728      	adds	r7, #40	@ 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800302a:	b580      	push	{r7, lr}
 800302c:	b08c      	sub	sp, #48	@ 0x30
 800302e:	af04      	add	r7, sp, #16
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fef2 	bl	8003e28 <pvPortMalloc>
 8003044:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800304c:	2054      	movs	r0, #84	@ 0x54
 800304e:	f000 feeb 	bl	8003e28 <pvPortMalloc>
 8003052:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003060:	e005      	b.n	800306e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f000 ffae 	bl	8003fc4 <vPortFree>
 8003068:	e001      	b.n	800306e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d017      	beq.n	80030a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	2300      	movs	r3, #0
 8003080:	9303      	str	r3, [sp, #12]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f80e 	bl	80030b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003098:	69f8      	ldr	r0, [r7, #28]
 800309a:	f000 f893 	bl	80031c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800309e:	2301      	movs	r3, #1
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e002      	b.n	80030aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
 80030a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030aa:	69bb      	ldr	r3, [r7, #24]
	}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030cc:	3b01      	subs	r3, #1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f023 0307 	bic.w	r3, r3, #7
 80030da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <prvInitialiseNewTask+0x4a>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	617b      	str	r3, [r7, #20]
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	e7fd      	b.n	80030fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01f      	beq.n	8003144 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	e012      	b.n	8003130 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	7819      	ldrb	r1, [r3, #0]
 8003112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	3334      	adds	r3, #52	@ 0x34
 800311a:	460a      	mov	r2, r1
 800311c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3301      	adds	r3, #1
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b0f      	cmp	r3, #15
 8003134:	d9e9      	bls.n	800310a <prvInitialiseNewTask+0x56>
 8003136:	e000      	b.n	800313a <prvInitialiseNewTask+0x86>
			{
				break;
 8003138:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003142:	e003      	b.n	800314c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314e:	2b06      	cmp	r3, #6
 8003150:	d901      	bls.n	8003156 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003152:	2306      	movs	r3, #6
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800315a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	2200      	movs	r2, #0
 8003166:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	3304      	adds	r3, #4
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fe68 	bl	8002e42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	3318      	adds	r3, #24
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fe63 	bl	8002e42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003180:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003184:	f1c3 0207 	rsb	r2, r3, #7
 8003188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800318c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003190:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	2200      	movs	r2, #0
 8003196:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	69b8      	ldr	r0, [r7, #24]
 80031a6:	f000 fc2b 	bl	8003a00 <pxPortInitialiseStack>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031cc:	f000 fd4c 	bl	8003c68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031d0:	4b2a      	ldr	r3, [pc, #168]	@ (800327c <prvAddNewTaskToReadyList+0xb8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	4a29      	ldr	r2, [pc, #164]	@ (800327c <prvAddNewTaskToReadyList+0xb8>)
 80031d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031da:	4b29      	ldr	r3, [pc, #164]	@ (8003280 <prvAddNewTaskToReadyList+0xbc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031e2:	4a27      	ldr	r2, [pc, #156]	@ (8003280 <prvAddNewTaskToReadyList+0xbc>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031e8:	4b24      	ldr	r3, [pc, #144]	@ (800327c <prvAddNewTaskToReadyList+0xb8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d110      	bne.n	8003212 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031f0:	f000 fac4 	bl	800377c <prvInitialiseTaskLists>
 80031f4:	e00d      	b.n	8003212 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031f6:	4b23      	ldr	r3, [pc, #140]	@ (8003284 <prvAddNewTaskToReadyList+0xc0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031fe:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <prvAddNewTaskToReadyList+0xbc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	429a      	cmp	r2, r3
 800320a:	d802      	bhi.n	8003212 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800320c:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <prvAddNewTaskToReadyList+0xbc>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003212:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <prvAddNewTaskToReadyList+0xc4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	4a1b      	ldr	r2, [pc, #108]	@ (8003288 <prvAddNewTaskToReadyList+0xc4>)
 800321a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <prvAddNewTaskToReadyList+0xc8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4313      	orrs	r3, r2
 800322a:	4a18      	ldr	r2, [pc, #96]	@ (800328c <prvAddNewTaskToReadyList+0xc8>)
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4a15      	ldr	r2, [pc, #84]	@ (8003290 <prvAddNewTaskToReadyList+0xcc>)
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7ff fe09 	bl	8002e5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800324a:	f000 fd3f 	bl	8003ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800324e:	4b0d      	ldr	r3, [pc, #52]	@ (8003284 <prvAddNewTaskToReadyList+0xc0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003256:	4b0a      	ldr	r3, [pc, #40]	@ (8003280 <prvAddNewTaskToReadyList+0xbc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	429a      	cmp	r2, r3
 8003262:	d207      	bcs.n	8003274 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003264:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <prvAddNewTaskToReadyList+0xd0>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	200004b4 	.word	0x200004b4
 8003280:	200003b4 	.word	0x200003b4
 8003284:	200004c0 	.word	0x200004c0
 8003288:	200004d0 	.word	0x200004d0
 800328c:	200004bc 	.word	0x200004bc
 8003290:	200003b8 	.word	0x200003b8
 8003294:	e000ed04 	.word	0xe000ed04

08003298 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d018      	beq.n	80032dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032aa:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <vTaskDelay+0x64>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <vTaskDelay+0x32>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	60bb      	str	r3, [r7, #8]
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	e7fd      	b.n	80032c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032ca:	f000 f87d 	bl	80033c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032ce:	2100      	movs	r1, #0
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fb2f 	bl	8003934 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032d6:	f000 f885 	bl	80033e4 <xTaskResumeAll>
 80032da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <vTaskDelay+0x68>)
 80032e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	200004dc 	.word	0x200004dc
 8003300:	e000ed04 	.word	0xe000ed04

08003304 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	@ 0x28
 8003308:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003312:	463a      	mov	r2, r7
 8003314:	1d39      	adds	r1, r7, #4
 8003316:	f107 0308 	add.w	r3, r7, #8
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f94e 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003320:	6839      	ldr	r1, [r7, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	9202      	str	r2, [sp, #8]
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2300      	movs	r3, #0
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2300      	movs	r3, #0
 8003330:	460a      	mov	r2, r1
 8003332:	491f      	ldr	r1, [pc, #124]	@ (80033b0 <vTaskStartScheduler+0xac>)
 8003334:	481f      	ldr	r0, [pc, #124]	@ (80033b4 <vTaskStartScheduler+0xb0>)
 8003336:	f7ff fe18 	bl	8002f6a <xTaskCreateStatic>
 800333a:	4603      	mov	r3, r0
 800333c:	4a1e      	ldr	r2, [pc, #120]	@ (80033b8 <vTaskStartScheduler+0xb4>)
 800333e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003340:	4b1d      	ldr	r3, [pc, #116]	@ (80033b8 <vTaskStartScheduler+0xb4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003348:	2301      	movs	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e001      	b.n	8003352 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d116      	bne.n	8003386 <vTaskStartScheduler+0x82>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	613b      	str	r3, [r7, #16]
}
 800336a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800336c:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <vTaskStartScheduler+0xb8>)
 800336e:	f04f 32ff 	mov.w	r2, #4294967295
 8003372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003374:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <vTaskStartScheduler+0xbc>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800337a:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <vTaskStartScheduler+0xc0>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003380:	f000 fbce 	bl	8003b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003384:	e00f      	b.n	80033a6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d10b      	bne.n	80033a6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	60fb      	str	r3, [r7, #12]
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <vTaskStartScheduler+0x9e>
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08004c20 	.word	0x08004c20
 80033b4:	0800374d 	.word	0x0800374d
 80033b8:	200004d8 	.word	0x200004d8
 80033bc:	200004d4 	.word	0x200004d4
 80033c0:	200004c0 	.word	0x200004c0
 80033c4:	200004b8 	.word	0x200004b8

080033c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033cc:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <vTaskSuspendAll+0x18>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	4a03      	ldr	r2, [pc, #12]	@ (80033e0 <vTaskSuspendAll+0x18>)
 80033d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	200004dc 	.word	0x200004dc

080033e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033f2:	4b42      	ldr	r3, [pc, #264]	@ (80034fc <xTaskResumeAll+0x118>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <xTaskResumeAll+0x2e>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	603b      	str	r3, [r7, #0]
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	e7fd      	b.n	800340e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003412:	f000 fc29 	bl	8003c68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003416:	4b39      	ldr	r3, [pc, #228]	@ (80034fc <xTaskResumeAll+0x118>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3b01      	subs	r3, #1
 800341c:	4a37      	ldr	r2, [pc, #220]	@ (80034fc <xTaskResumeAll+0x118>)
 800341e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003420:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <xTaskResumeAll+0x118>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d161      	bne.n	80034ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003428:	4b35      	ldr	r3, [pc, #212]	@ (8003500 <xTaskResumeAll+0x11c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d05d      	beq.n	80034ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003430:	e02e      	b.n	8003490 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003432:	4b34      	ldr	r3, [pc, #208]	@ (8003504 <xTaskResumeAll+0x120>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3318      	adds	r3, #24
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fd69 	bl	8002f16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fd64 	bl	8002f16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	2201      	movs	r2, #1
 8003454:	409a      	lsls	r2, r3
 8003456:	4b2c      	ldr	r3, [pc, #176]	@ (8003508 <xTaskResumeAll+0x124>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	4a2a      	ldr	r2, [pc, #168]	@ (8003508 <xTaskResumeAll+0x124>)
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4a27      	ldr	r2, [pc, #156]	@ (800350c <xTaskResumeAll+0x128>)
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f7ff fcf0 	bl	8002e5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003480:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <xTaskResumeAll+0x12c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800348a:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <xTaskResumeAll+0x130>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003490:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <xTaskResumeAll+0x120>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1cc      	bne.n	8003432 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800349e:	f000 fa0b 	bl	80038b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <xTaskResumeAll+0x134>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034ae:	f000 f837 	bl	8003520 <xTaskIncrementTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034b8:	4b16      	ldr	r3, [pc, #88]	@ (8003514 <xTaskResumeAll+0x130>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f1      	bne.n	80034ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80034ca:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <xTaskResumeAll+0x134>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034d0:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <xTaskResumeAll+0x130>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <xTaskResumeAll+0x138>)
 80034de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034ec:	f000 fbee 	bl	8003ccc <vPortExitCritical>

	return xAlreadyYielded;
 80034f0:	68bb      	ldr	r3, [r7, #8]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200004dc 	.word	0x200004dc
 8003500:	200004b4 	.word	0x200004b4
 8003504:	20000474 	.word	0x20000474
 8003508:	200004bc 	.word	0x200004bc
 800350c:	200003b8 	.word	0x200003b8
 8003510:	200003b4 	.word	0x200003b4
 8003514:	200004c8 	.word	0x200004c8
 8003518:	200004c4 	.word	0x200004c4
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800352a:	4b4f      	ldr	r3, [pc, #316]	@ (8003668 <xTaskIncrementTick+0x148>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 808f 	bne.w	8003652 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003534:	4b4d      	ldr	r3, [pc, #308]	@ (800366c <xTaskIncrementTick+0x14c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800353c:	4a4b      	ldr	r2, [pc, #300]	@ (800366c <xTaskIncrementTick+0x14c>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d121      	bne.n	800358c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003548:	4b49      	ldr	r3, [pc, #292]	@ (8003670 <xTaskIncrementTick+0x150>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	603b      	str	r3, [r7, #0]
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <xTaskIncrementTick+0x46>
 800356a:	4b41      	ldr	r3, [pc, #260]	@ (8003670 <xTaskIncrementTick+0x150>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	4b40      	ldr	r3, [pc, #256]	@ (8003674 <xTaskIncrementTick+0x154>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a3e      	ldr	r2, [pc, #248]	@ (8003670 <xTaskIncrementTick+0x150>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4a3e      	ldr	r2, [pc, #248]	@ (8003674 <xTaskIncrementTick+0x154>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b3e      	ldr	r3, [pc, #248]	@ (8003678 <xTaskIncrementTick+0x158>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	4a3c      	ldr	r2, [pc, #240]	@ (8003678 <xTaskIncrementTick+0x158>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	f000 f996 	bl	80038b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800358c:	4b3b      	ldr	r3, [pc, #236]	@ (800367c <xTaskIncrementTick+0x15c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	429a      	cmp	r2, r3
 8003594:	d348      	bcc.n	8003628 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003596:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <xTaskIncrementTick+0x150>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a0:	4b36      	ldr	r3, [pc, #216]	@ (800367c <xTaskIncrementTick+0x15c>)
 80035a2:	f04f 32ff 	mov.w	r2, #4294967295
 80035a6:	601a      	str	r2, [r3, #0]
					break;
 80035a8:	e03e      	b.n	8003628 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035aa:	4b31      	ldr	r3, [pc, #196]	@ (8003670 <xTaskIncrementTick+0x150>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d203      	bcs.n	80035ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035c2:	4a2e      	ldr	r2, [pc, #184]	@ (800367c <xTaskIncrementTick+0x15c>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035c8:	e02e      	b.n	8003628 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fca1 	bl	8002f16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3318      	adds	r3, #24
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fc98 	bl	8002f16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	2201      	movs	r2, #1
 80035ec:	409a      	lsls	r2, r3
 80035ee:	4b24      	ldr	r3, [pc, #144]	@ (8003680 <xTaskIncrementTick+0x160>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <xTaskIncrementTick+0x160>)
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4a1f      	ldr	r2, [pc, #124]	@ (8003684 <xTaskIncrementTick+0x164>)
 8003606:	441a      	add	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f7ff fc24 	bl	8002e5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <xTaskIncrementTick+0x168>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	429a      	cmp	r2, r3
 8003620:	d3b9      	bcc.n	8003596 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003622:	2301      	movs	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003626:	e7b6      	b.n	8003596 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003628:	4b17      	ldr	r3, [pc, #92]	@ (8003688 <xTaskIncrementTick+0x168>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362e:	4915      	ldr	r1, [pc, #84]	@ (8003684 <xTaskIncrementTick+0x164>)
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d901      	bls.n	8003644 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003640:	2301      	movs	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003644:	4b11      	ldr	r3, [pc, #68]	@ (800368c <xTaskIncrementTick+0x16c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e004      	b.n	800365c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003652:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <xTaskIncrementTick+0x170>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	4a0d      	ldr	r2, [pc, #52]	@ (8003690 <xTaskIncrementTick+0x170>)
 800365a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800365c:	697b      	ldr	r3, [r7, #20]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200004dc 	.word	0x200004dc
 800366c:	200004b8 	.word	0x200004b8
 8003670:	2000046c 	.word	0x2000046c
 8003674:	20000470 	.word	0x20000470
 8003678:	200004cc 	.word	0x200004cc
 800367c:	200004d4 	.word	0x200004d4
 8003680:	200004bc 	.word	0x200004bc
 8003684:	200003b8 	.word	0x200003b8
 8003688:	200003b4 	.word	0x200003b4
 800368c:	200004c8 	.word	0x200004c8
 8003690:	200004c4 	.word	0x200004c4

08003694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800369a:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <vTaskSwitchContext+0xa4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036a2:	4b26      	ldr	r3, [pc, #152]	@ (800373c <vTaskSwitchContext+0xa8>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036a8:	e040      	b.n	800372c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <vTaskSwitchContext+0xa8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b0:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <vTaskSwitchContext+0xac>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036be:	7afb      	ldrb	r3, [r7, #11]
 80036c0:	f1c3 031f 	rsb	r3, r3, #31
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	491f      	ldr	r1, [pc, #124]	@ (8003744 <vTaskSwitchContext+0xb0>)
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	607b      	str	r3, [r7, #4]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <vTaskSwitchContext+0x5a>
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4a11      	ldr	r2, [pc, #68]	@ (8003744 <vTaskSwitchContext+0xb0>)
 80036fe:	4413      	add	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3308      	adds	r3, #8
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <vTaskSwitchContext+0x8e>
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a07      	ldr	r2, [pc, #28]	@ (8003748 <vTaskSwitchContext+0xb4>)
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	200004dc 	.word	0x200004dc
 800373c:	200004c8 	.word	0x200004c8
 8003740:	200004bc 	.word	0x200004bc
 8003744:	200003b8 	.word	0x200003b8
 8003748:	200003b4 	.word	0x200003b4

0800374c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003754:	f000 f852 	bl	80037fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <prvIdleTask+0x28>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d9f9      	bls.n	8003754 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <prvIdleTask+0x2c>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003770:	e7f0      	b.n	8003754 <prvIdleTask+0x8>
 8003772:	bf00      	nop
 8003774:	200003b8 	.word	0x200003b8
 8003778:	e000ed04 	.word	0xe000ed04

0800377c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	e00c      	b.n	80037a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4a12      	ldr	r2, [pc, #72]	@ (80037dc <prvInitialiseTaskLists+0x60>)
 8003794:	4413      	add	r3, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fb33 	bl	8002e02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3301      	adds	r3, #1
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b06      	cmp	r3, #6
 80037a6:	d9ef      	bls.n	8003788 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037a8:	480d      	ldr	r0, [pc, #52]	@ (80037e0 <prvInitialiseTaskLists+0x64>)
 80037aa:	f7ff fb2a 	bl	8002e02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037ae:	480d      	ldr	r0, [pc, #52]	@ (80037e4 <prvInitialiseTaskLists+0x68>)
 80037b0:	f7ff fb27 	bl	8002e02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037b4:	480c      	ldr	r0, [pc, #48]	@ (80037e8 <prvInitialiseTaskLists+0x6c>)
 80037b6:	f7ff fb24 	bl	8002e02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037ba:	480c      	ldr	r0, [pc, #48]	@ (80037ec <prvInitialiseTaskLists+0x70>)
 80037bc:	f7ff fb21 	bl	8002e02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037c0:	480b      	ldr	r0, [pc, #44]	@ (80037f0 <prvInitialiseTaskLists+0x74>)
 80037c2:	f7ff fb1e 	bl	8002e02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <prvInitialiseTaskLists+0x78>)
 80037c8:	4a05      	ldr	r2, [pc, #20]	@ (80037e0 <prvInitialiseTaskLists+0x64>)
 80037ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <prvInitialiseTaskLists+0x7c>)
 80037ce:	4a05      	ldr	r2, [pc, #20]	@ (80037e4 <prvInitialiseTaskLists+0x68>)
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200003b8 	.word	0x200003b8
 80037e0:	20000444 	.word	0x20000444
 80037e4:	20000458 	.word	0x20000458
 80037e8:	20000474 	.word	0x20000474
 80037ec:	20000488 	.word	0x20000488
 80037f0:	200004a0 	.word	0x200004a0
 80037f4:	2000046c 	.word	0x2000046c
 80037f8:	20000470 	.word	0x20000470

080037fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003802:	e019      	b.n	8003838 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003804:	f000 fa30 	bl	8003c68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003808:	4b10      	ldr	r3, [pc, #64]	@ (800384c <prvCheckTasksWaitingTermination+0x50>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fb7e 	bl	8002f16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800381a:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <prvCheckTasksWaitingTermination+0x54>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3b01      	subs	r3, #1
 8003820:	4a0b      	ldr	r2, [pc, #44]	@ (8003850 <prvCheckTasksWaitingTermination+0x54>)
 8003822:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <prvCheckTasksWaitingTermination+0x58>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3b01      	subs	r3, #1
 800382a:	4a0a      	ldr	r2, [pc, #40]	@ (8003854 <prvCheckTasksWaitingTermination+0x58>)
 800382c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800382e:	f000 fa4d 	bl	8003ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f810 	bl	8003858 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <prvCheckTasksWaitingTermination+0x58>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e1      	bne.n	8003804 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000488 	.word	0x20000488
 8003850:	200004b4 	.word	0x200004b4
 8003854:	2000049c 	.word	0x2000049c

08003858 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003866:	2b00      	cmp	r3, #0
 8003868:	d108      	bne.n	800387c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fba8 	bl	8003fc4 <vPortFree>
				vPortFree( pxTCB );
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fba5 	bl	8003fc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800387a:	e019      	b.n	80038b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003882:	2b01      	cmp	r3, #1
 8003884:	d103      	bne.n	800388e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fb9c 	bl	8003fc4 <vPortFree>
	}
 800388c:	e010      	b.n	80038b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003894:	2b02      	cmp	r3, #2
 8003896:	d00b      	beq.n	80038b0 <prvDeleteTCB+0x58>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	60fb      	str	r3, [r7, #12]
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <prvDeleteTCB+0x54>
	}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038be:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <prvResetNextTaskUnblockTime+0x38>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038c8:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <prvResetNextTaskUnblockTime+0x3c>)
 80038ca:	f04f 32ff 	mov.w	r2, #4294967295
 80038ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038d0:	e008      	b.n	80038e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <prvResetNextTaskUnblockTime+0x38>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <prvResetNextTaskUnblockTime+0x3c>)
 80038e2:	6013      	str	r3, [r2, #0]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	2000046c 	.word	0x2000046c
 80038f4:	200004d4 	.word	0x200004d4

080038f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038fe:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <xTaskGetSchedulerState+0x34>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003906:	2301      	movs	r3, #1
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	e008      	b.n	800391e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390c:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <xTaskGetSchedulerState+0x38>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003914:	2302      	movs	r3, #2
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	e001      	b.n	800391e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800391e:	687b      	ldr	r3, [r7, #4]
	}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	200004c0 	.word	0x200004c0
 8003930:	200004dc 	.word	0x200004dc

08003934 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003944:	4b28      	ldr	r3, [pc, #160]	@ (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3304      	adds	r3, #4
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fae3 	bl	8002f16 <uxListRemove>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003956:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	2201      	movs	r2, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	4b21      	ldr	r3, [pc, #132]	@ (80039ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4013      	ands	r3, r2
 800396a:	4a20      	ldr	r2, [pc, #128]	@ (80039ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800396c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d10a      	bne.n	800398c <prvAddCurrentTaskToDelayedList+0x58>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800397c:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3304      	adds	r3, #4
 8003982:	4619      	mov	r1, r3
 8003984:	481a      	ldr	r0, [pc, #104]	@ (80039f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003986:	f7ff fa69 	bl	8002e5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800398a:	e026      	b.n	80039da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003994:	4b14      	ldr	r3, [pc, #80]	@ (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d209      	bcs.n	80039b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a4:	4b13      	ldr	r3, [pc, #76]	@ (80039f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7ff fa77 	bl	8002ea4 <vListInsert>
}
 80039b6:	e010      	b.n	80039da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039b8:	4b0f      	ldr	r3, [pc, #60]	@ (80039f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7ff fa6d 	bl	8002ea4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039ca:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d202      	bcs.n	80039da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80039d4:	4a09      	ldr	r2, [pc, #36]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6013      	str	r3, [r2, #0]
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200004b8 	.word	0x200004b8
 80039e8:	200003b4 	.word	0x200003b4
 80039ec:	200004bc 	.word	0x200004bc
 80039f0:	200004a0 	.word	0x200004a0
 80039f4:	20000470 	.word	0x20000470
 80039f8:	2000046c 	.word	0x2000046c
 80039fc:	200004d4 	.word	0x200004d4

08003a00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3b04      	subs	r3, #4
 8003a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3b04      	subs	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a30:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <pxPortInitialiseStack+0x64>)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3b14      	subs	r3, #20
 8003a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3b04      	subs	r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f06f 0202 	mvn.w	r2, #2
 8003a4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3b20      	subs	r3, #32
 8003a54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	08003a69 	.word	0x08003a69

08003a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a72:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <prvTaskExitError+0x58>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d00b      	beq.n	8003a94 <prvTaskExitError+0x2c>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	60fb      	str	r3, [r7, #12]
}
 8003a8e:	bf00      	nop
 8003a90:	bf00      	nop
 8003a92:	e7fd      	b.n	8003a90 <prvTaskExitError+0x28>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	60bb      	str	r3, [r7, #8]
}
 8003aa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003aa8:	bf00      	nop
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0fc      	beq.n	8003aaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	2000000c 	.word	0x2000000c
	...

08003ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ad0:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <pxCurrentTCBConst2>)
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	6808      	ldr	r0, [r1, #0]
 8003ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ada:	f380 8809 	msr	PSP, r0
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f380 8811 	msr	BASEPRI, r0
 8003aea:	4770      	bx	lr
 8003aec:	f3af 8000 	nop.w

08003af0 <pxCurrentTCBConst2>:
 8003af0:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop

08003af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003af8:	4808      	ldr	r0, [pc, #32]	@ (8003b1c <prvPortStartFirstTask+0x24>)
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	6800      	ldr	r0, [r0, #0]
 8003afe:	f380 8808 	msr	MSP, r0
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8814 	msr	CONTROL, r0
 8003b0a:	b662      	cpsie	i
 8003b0c:	b661      	cpsie	f
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	df00      	svc	0
 8003b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b1a:	bf00      	nop
 8003b1c:	e000ed08 	.word	0xe000ed08

08003b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b26:	4b47      	ldr	r3, [pc, #284]	@ (8003c44 <xPortStartScheduler+0x124>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a47      	ldr	r2, [pc, #284]	@ (8003c48 <xPortStartScheduler+0x128>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10b      	bne.n	8003b48 <xPortStartScheduler+0x28>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b48:	4b3e      	ldr	r3, [pc, #248]	@ (8003c44 <xPortStartScheduler+0x124>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c4c <xPortStartScheduler+0x12c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10b      	bne.n	8003b6a <xPortStartScheduler+0x4a>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	613b      	str	r3, [r7, #16]
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	e7fd      	b.n	8003b66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b6a:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <xPortStartScheduler+0x130>)
 8003b6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	22ff      	movs	r2, #255	@ 0xff
 8003b7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <xPortStartScheduler+0x134>)
 8003b90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b92:	4b31      	ldr	r3, [pc, #196]	@ (8003c58 <xPortStartScheduler+0x138>)
 8003b94:	2207      	movs	r2, #7
 8003b96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b98:	e009      	b.n	8003bae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <xPortStartScheduler+0x138>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c58 <xPortStartScheduler+0x138>)
 8003ba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b80      	cmp	r3, #128	@ 0x80
 8003bb8:	d0ef      	beq.n	8003b9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bba:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <xPortStartScheduler+0x138>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1c3 0307 	rsb	r3, r3, #7
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d00b      	beq.n	8003bde <xPortStartScheduler+0xbe>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	60bb      	str	r3, [r7, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	e7fd      	b.n	8003bda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bde:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <xPortStartScheduler+0x138>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c58 <xPortStartScheduler+0x138>)
 8003be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <xPortStartScheduler+0x138>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <xPortStartScheduler+0x138>)
 8003bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bfc:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <xPortStartScheduler+0x13c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <xPortStartScheduler+0x13c>)
 8003c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c08:	4b14      	ldr	r3, [pc, #80]	@ (8003c5c <xPortStartScheduler+0x13c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	@ (8003c5c <xPortStartScheduler+0x13c>)
 8003c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c14:	f000 f8da 	bl	8003dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c18:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <xPortStartScheduler+0x140>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c1e:	f000 f8f9 	bl	8003e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c22:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <xPortStartScheduler+0x144>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a0f      	ldr	r2, [pc, #60]	@ (8003c64 <xPortStartScheduler+0x144>)
 8003c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c2e:	f7ff ff63 	bl	8003af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c32:	f7ff fd2f 	bl	8003694 <vTaskSwitchContext>
	prvTaskExitError();
 8003c36:	f7ff ff17 	bl	8003a68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	e000ed00 	.word	0xe000ed00
 8003c48:	410fc271 	.word	0x410fc271
 8003c4c:	410fc270 	.word	0x410fc270
 8003c50:	e000e400 	.word	0xe000e400
 8003c54:	200004e0 	.word	0x200004e0
 8003c58:	200004e4 	.word	0x200004e4
 8003c5c:	e000ed20 	.word	0xe000ed20
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	e000ef34 	.word	0xe000ef34

08003c68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	607b      	str	r3, [r7, #4]
}
 8003c80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c82:	4b10      	ldr	r3, [pc, #64]	@ (8003cc4 <vPortEnterCritical+0x5c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	4a0e      	ldr	r2, [pc, #56]	@ (8003cc4 <vPortEnterCritical+0x5c>)
 8003c8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <vPortEnterCritical+0x5c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d110      	bne.n	8003cb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c94:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <vPortEnterCritical+0x60>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	603b      	str	r3, [r7, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <vPortEnterCritical+0x4a>
	}
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cd2:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <vPortExitCritical+0x50>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <vPortExitCritical+0x26>
	__asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	607b      	str	r3, [r7, #4]
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	e7fd      	b.n	8003cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <vPortExitCritical+0x50>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4a08      	ldr	r2, [pc, #32]	@ (8003d1c <vPortExitCritical+0x50>)
 8003cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cfc:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <vPortExitCritical+0x50>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <vPortExitCritical+0x44>
 8003d04:	2300      	movs	r3, #0
 8003d06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	2000000c 	.word	0x2000000c

08003d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d20:	f3ef 8009 	mrs	r0, PSP
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	4b15      	ldr	r3, [pc, #84]	@ (8003d80 <pxCurrentTCBConst>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	f01e 0f10 	tst.w	lr, #16
 8003d30:	bf08      	it	eq
 8003d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3a:	6010      	str	r0, [r2, #0]
 8003d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d44:	f380 8811 	msr	BASEPRI, r0
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f7ff fca0 	bl	8003694 <vTaskSwitchContext>
 8003d54:	f04f 0000 	mov.w	r0, #0
 8003d58:	f380 8811 	msr	BASEPRI, r0
 8003d5c:	bc09      	pop	{r0, r3}
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	6808      	ldr	r0, [r1, #0]
 8003d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d66:	f01e 0f10 	tst.w	lr, #16
 8003d6a:	bf08      	it	eq
 8003d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d70:	f380 8809 	msr	PSP, r0
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	f3af 8000 	nop.w

08003d80 <pxCurrentTCBConst>:
 8003d80:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop

08003d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	607b      	str	r3, [r7, #4]
}
 8003da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003da2:	f7ff fbbd 	bl	8003520 <xTaskIncrementTick>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dac:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <xPortSysTickHandler+0x40>)
 8003dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	2300      	movs	r3, #0
 8003db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f383 8811 	msr	BASEPRI, r3
}
 8003dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <vPortSetupTimerInterrupt+0x34>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <vPortSetupTimerInterrupt+0x38>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <vPortSetupTimerInterrupt+0x3c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e0c <vPortSetupTimerInterrupt+0x40>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	4a09      	ldr	r2, [pc, #36]	@ (8003e10 <vPortSetupTimerInterrupt+0x44>)
 8003dea:	3b01      	subs	r3, #1
 8003dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dee:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <vPortSetupTimerInterrupt+0x34>)
 8003df0:	2207      	movs	r2, #7
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010
 8003e04:	e000e018 	.word	0xe000e018
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	10624dd3 	.word	0x10624dd3
 8003e10:	e000e014 	.word	0xe000e014

08003e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003e24 <vPortEnableVFP+0x10>
 8003e18:	6801      	ldr	r1, [r0, #0]
 8003e1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003e1e:	6001      	str	r1, [r0, #0]
 8003e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e22:	bf00      	nop
 8003e24:	e000ed88 	.word	0xe000ed88

08003e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e34:	f7ff fac8 	bl	80033c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e38:	4b5c      	ldr	r3, [pc, #368]	@ (8003fac <pvPortMalloc+0x184>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e40:	f000 f924 	bl	800408c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e44:	4b5a      	ldr	r3, [pc, #360]	@ (8003fb0 <pvPortMalloc+0x188>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 8095 	bne.w	8003f7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01e      	beq.n	8003e96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003e58:	2208      	movs	r2, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f023 0307 	bic.w	r3, r3, #7
 8003e70:	3308      	adds	r3, #8
 8003e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <pvPortMalloc+0x6e>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	617b      	str	r3, [r7, #20]
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d06f      	beq.n	8003f7c <pvPortMalloc+0x154>
 8003e9c:	4b45      	ldr	r3, [pc, #276]	@ (8003fb4 <pvPortMalloc+0x18c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d86a      	bhi.n	8003f7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ea6:	4b44      	ldr	r3, [pc, #272]	@ (8003fb8 <pvPortMalloc+0x190>)
 8003ea8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003eaa:	4b43      	ldr	r3, [pc, #268]	@ (8003fb8 <pvPortMalloc+0x190>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003eb0:	e004      	b.n	8003ebc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d903      	bls.n	8003ece <pvPortMalloc+0xa6>
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f1      	bne.n	8003eb2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ece:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <pvPortMalloc+0x184>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d051      	beq.n	8003f7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2208      	movs	r2, #8
 8003ede:	4413      	add	r3, r2
 8003ee0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	1ad2      	subs	r2, r2, r3
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d920      	bls.n	8003f3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00b      	beq.n	8003f24 <pvPortMalloc+0xfc>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	613b      	str	r3, [r7, #16]
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	e7fd      	b.n	8003f20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f36:	69b8      	ldr	r0, [r7, #24]
 8003f38:	f000 f90a 	bl	8004150 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb4 <pvPortMalloc+0x18c>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb4 <pvPortMalloc+0x18c>)
 8003f48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <pvPortMalloc+0x18c>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fbc <pvPortMalloc+0x194>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d203      	bcs.n	8003f5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f56:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <pvPortMalloc+0x18c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a18      	ldr	r2, [pc, #96]	@ (8003fbc <pvPortMalloc+0x194>)
 8003f5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <pvPortMalloc+0x188>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003f72:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <pvPortMalloc+0x198>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a11      	ldr	r2, [pc, #68]	@ (8003fc0 <pvPortMalloc+0x198>)
 8003f7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f7c:	f7ff fa32 	bl	80033e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <pvPortMalloc+0x17a>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60fb      	str	r3, [r7, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <pvPortMalloc+0x176>
	return pvReturn;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	@ 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200040f0 	.word	0x200040f0
 8003fb0:	20004104 	.word	0x20004104
 8003fb4:	200040f4 	.word	0x200040f4
 8003fb8:	200040e8 	.word	0x200040e8
 8003fbc:	200040f8 	.word	0x200040f8
 8003fc0:	200040fc 	.word	0x200040fc

08003fc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04f      	beq.n	8004076 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	425b      	negs	r3, r3
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4413      	add	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4b25      	ldr	r3, [pc, #148]	@ (8004080 <vPortFree+0xbc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <vPortFree+0x46>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	60fb      	str	r3, [r7, #12]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <vPortFree+0x66>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60bb      	str	r3, [r7, #8]
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	e7fd      	b.n	8004026 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <vPortFree+0xbc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01e      	beq.n	8004076 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d11a      	bne.n	8004076 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4b0e      	ldr	r3, [pc, #56]	@ (8004080 <vPortFree+0xbc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	43db      	mvns	r3, r3
 800404a:	401a      	ands	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004050:	f7ff f9ba 	bl	80033c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <vPortFree+0xc0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4413      	add	r3, r2
 800405e:	4a09      	ldr	r2, [pc, #36]	@ (8004084 <vPortFree+0xc0>)
 8004060:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004062:	6938      	ldr	r0, [r7, #16]
 8004064:	f000 f874 	bl	8004150 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004068:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <vPortFree+0xc4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	4a06      	ldr	r2, [pc, #24]	@ (8004088 <vPortFree+0xc4>)
 8004070:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004072:	f7ff f9b7 	bl	80033e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20004104 	.word	0x20004104
 8004084:	200040f4 	.word	0x200040f4
 8004088:	20004100 	.word	0x20004100

0800408c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004092:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004096:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004098:	4b27      	ldr	r3, [pc, #156]	@ (8004138 <prvHeapInit+0xac>)
 800409a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3307      	adds	r3, #7
 80040aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0307 	bic.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004138 <prvHeapInit+0xac>)
 80040bc:	4413      	add	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040c4:	4a1d      	ldr	r2, [pc, #116]	@ (800413c <prvHeapInit+0xb0>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040ca:	4b1c      	ldr	r3, [pc, #112]	@ (800413c <prvHeapInit+0xb0>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	4413      	add	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040d8:	2208      	movs	r2, #8
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <prvHeapInit+0xb4>)
 80040ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040ee:	4b14      	ldr	r3, [pc, #80]	@ (8004140 <prvHeapInit+0xb4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040f6:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <prvHeapInit+0xb4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	1ad2      	subs	r2, r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800410c:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <prvHeapInit+0xb4>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a0a      	ldr	r2, [pc, #40]	@ (8004144 <prvHeapInit+0xb8>)
 800411a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4a09      	ldr	r2, [pc, #36]	@ (8004148 <prvHeapInit+0xbc>)
 8004122:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004124:	4b09      	ldr	r3, [pc, #36]	@ (800414c <prvHeapInit+0xc0>)
 8004126:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800412a:	601a      	str	r2, [r3, #0]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	200004e8 	.word	0x200004e8
 800413c:	200040e8 	.word	0x200040e8
 8004140:	200040f0 	.word	0x200040f0
 8004144:	200040f8 	.word	0x200040f8
 8004148:	200040f4 	.word	0x200040f4
 800414c:	20004104 	.word	0x20004104

08004150 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004158:	4b28      	ldr	r3, [pc, #160]	@ (80041fc <prvInsertBlockIntoFreeList+0xac>)
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e002      	b.n	8004164 <prvInsertBlockIntoFreeList+0x14>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d8f7      	bhi.n	800415e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	4413      	add	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d108      	bne.n	8004192 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	441a      	add	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d118      	bne.n	80041d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <prvInsertBlockIntoFreeList+0xb0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d00d      	beq.n	80041ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e008      	b.n	80041e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004200 <prvInsertBlockIntoFreeList+0xb0>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e003      	b.n	80041e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d002      	beq.n	80041ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	200040e8 	.word	0x200040e8
 8004200:	200040f0 	.word	0x200040f0

08004204 <sniprintf>:
 8004204:	b40c      	push	{r2, r3}
 8004206:	b530      	push	{r4, r5, lr}
 8004208:	4b18      	ldr	r3, [pc, #96]	@ (800426c <sniprintf+0x68>)
 800420a:	1e0c      	subs	r4, r1, #0
 800420c:	681d      	ldr	r5, [r3, #0]
 800420e:	b09d      	sub	sp, #116	@ 0x74
 8004210:	da08      	bge.n	8004224 <sniprintf+0x20>
 8004212:	238b      	movs	r3, #139	@ 0x8b
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	f04f 30ff 	mov.w	r0, #4294967295
 800421a:	b01d      	add	sp, #116	@ 0x74
 800421c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004220:	b002      	add	sp, #8
 8004222:	4770      	bx	lr
 8004224:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004228:	f8ad 3014 	strh.w	r3, [sp, #20]
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004232:	bf14      	ite	ne
 8004234:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004238:	4623      	moveq	r3, r4
 800423a:	9304      	str	r3, [sp, #16]
 800423c:	9307      	str	r3, [sp, #28]
 800423e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004242:	9002      	str	r0, [sp, #8]
 8004244:	9006      	str	r0, [sp, #24]
 8004246:	f8ad 3016 	strh.w	r3, [sp, #22]
 800424a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800424c:	ab21      	add	r3, sp, #132	@ 0x84
 800424e:	a902      	add	r1, sp, #8
 8004250:	4628      	mov	r0, r5
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	f000 f9a2 	bl	800459c <_svfiprintf_r>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	bfbc      	itt	lt
 800425c:	238b      	movlt	r3, #139	@ 0x8b
 800425e:	602b      	strlt	r3, [r5, #0]
 8004260:	2c00      	cmp	r4, #0
 8004262:	d0da      	beq.n	800421a <sniprintf+0x16>
 8004264:	9b02      	ldr	r3, [sp, #8]
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e7d6      	b.n	800421a <sniprintf+0x16>
 800426c:	20000010 	.word	0x20000010

08004270 <memset>:
 8004270:	4402      	add	r2, r0
 8004272:	4603      	mov	r3, r0
 8004274:	4293      	cmp	r3, r2
 8004276:	d100      	bne.n	800427a <memset+0xa>
 8004278:	4770      	bx	lr
 800427a:	f803 1b01 	strb.w	r1, [r3], #1
 800427e:	e7f9      	b.n	8004274 <memset+0x4>

08004280 <__errno>:
 8004280:	4b01      	ldr	r3, [pc, #4]	@ (8004288 <__errno+0x8>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000010 	.word	0x20000010

0800428c <__libc_init_array>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	4d0d      	ldr	r5, [pc, #52]	@ (80042c4 <__libc_init_array+0x38>)
 8004290:	4c0d      	ldr	r4, [pc, #52]	@ (80042c8 <__libc_init_array+0x3c>)
 8004292:	1b64      	subs	r4, r4, r5
 8004294:	10a4      	asrs	r4, r4, #2
 8004296:	2600      	movs	r6, #0
 8004298:	42a6      	cmp	r6, r4
 800429a:	d109      	bne.n	80042b0 <__libc_init_array+0x24>
 800429c:	4d0b      	ldr	r5, [pc, #44]	@ (80042cc <__libc_init_array+0x40>)
 800429e:	4c0c      	ldr	r4, [pc, #48]	@ (80042d0 <__libc_init_array+0x44>)
 80042a0:	f000 fc64 	bl	8004b6c <_init>
 80042a4:	1b64      	subs	r4, r4, r5
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	2600      	movs	r6, #0
 80042aa:	42a6      	cmp	r6, r4
 80042ac:	d105      	bne.n	80042ba <__libc_init_array+0x2e>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b4:	4798      	blx	r3
 80042b6:	3601      	adds	r6, #1
 80042b8:	e7ee      	b.n	8004298 <__libc_init_array+0xc>
 80042ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80042be:	4798      	blx	r3
 80042c0:	3601      	adds	r6, #1
 80042c2:	e7f2      	b.n	80042aa <__libc_init_array+0x1e>
 80042c4:	08004c7c 	.word	0x08004c7c
 80042c8:	08004c7c 	.word	0x08004c7c
 80042cc:	08004c7c 	.word	0x08004c7c
 80042d0:	08004c80 	.word	0x08004c80

080042d4 <__retarget_lock_acquire_recursive>:
 80042d4:	4770      	bx	lr

080042d6 <__retarget_lock_release_recursive>:
 80042d6:	4770      	bx	lr

080042d8 <memcpy>:
 80042d8:	440a      	add	r2, r1
 80042da:	4291      	cmp	r1, r2
 80042dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80042e0:	d100      	bne.n	80042e4 <memcpy+0xc>
 80042e2:	4770      	bx	lr
 80042e4:	b510      	push	{r4, lr}
 80042e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ee:	4291      	cmp	r1, r2
 80042f0:	d1f9      	bne.n	80042e6 <memcpy+0xe>
 80042f2:	bd10      	pop	{r4, pc}

080042f4 <_free_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4605      	mov	r5, r0
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d041      	beq.n	8004380 <_free_r+0x8c>
 80042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004300:	1f0c      	subs	r4, r1, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfb8      	it	lt
 8004306:	18e4      	addlt	r4, r4, r3
 8004308:	f000 f8e0 	bl	80044cc <__malloc_lock>
 800430c:	4a1d      	ldr	r2, [pc, #116]	@ (8004384 <_free_r+0x90>)
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	b933      	cbnz	r3, 8004320 <_free_r+0x2c>
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	6014      	str	r4, [r2, #0]
 8004316:	4628      	mov	r0, r5
 8004318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800431c:	f000 b8dc 	b.w	80044d8 <__malloc_unlock>
 8004320:	42a3      	cmp	r3, r4
 8004322:	d908      	bls.n	8004336 <_free_r+0x42>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	1821      	adds	r1, r4, r0
 8004328:	428b      	cmp	r3, r1
 800432a:	bf01      	itttt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	1809      	addeq	r1, r1, r0
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	e7ed      	b.n	8004312 <_free_r+0x1e>
 8004336:	461a      	mov	r2, r3
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b10b      	cbz	r3, 8004340 <_free_r+0x4c>
 800433c:	42a3      	cmp	r3, r4
 800433e:	d9fa      	bls.n	8004336 <_free_r+0x42>
 8004340:	6811      	ldr	r1, [r2, #0]
 8004342:	1850      	adds	r0, r2, r1
 8004344:	42a0      	cmp	r0, r4
 8004346:	d10b      	bne.n	8004360 <_free_r+0x6c>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	4401      	add	r1, r0
 800434c:	1850      	adds	r0, r2, r1
 800434e:	4283      	cmp	r3, r0
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	d1e0      	bne.n	8004316 <_free_r+0x22>
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	4408      	add	r0, r1
 800435c:	6010      	str	r0, [r2, #0]
 800435e:	e7da      	b.n	8004316 <_free_r+0x22>
 8004360:	d902      	bls.n	8004368 <_free_r+0x74>
 8004362:	230c      	movs	r3, #12
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	e7d6      	b.n	8004316 <_free_r+0x22>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	1821      	adds	r1, r4, r0
 800436c:	428b      	cmp	r3, r1
 800436e:	bf04      	itt	eq
 8004370:	6819      	ldreq	r1, [r3, #0]
 8004372:	685b      	ldreq	r3, [r3, #4]
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	bf04      	itt	eq
 8004378:	1809      	addeq	r1, r1, r0
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	6054      	str	r4, [r2, #4]
 800437e:	e7ca      	b.n	8004316 <_free_r+0x22>
 8004380:	bd38      	pop	{r3, r4, r5, pc}
 8004382:	bf00      	nop
 8004384:	2000424c 	.word	0x2000424c

08004388 <sbrk_aligned>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4e0f      	ldr	r6, [pc, #60]	@ (80043c8 <sbrk_aligned+0x40>)
 800438c:	460c      	mov	r4, r1
 800438e:	6831      	ldr	r1, [r6, #0]
 8004390:	4605      	mov	r5, r0
 8004392:	b911      	cbnz	r1, 800439a <sbrk_aligned+0x12>
 8004394:	f000 fba4 	bl	8004ae0 <_sbrk_r>
 8004398:	6030      	str	r0, [r6, #0]
 800439a:	4621      	mov	r1, r4
 800439c:	4628      	mov	r0, r5
 800439e:	f000 fb9f 	bl	8004ae0 <_sbrk_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	d103      	bne.n	80043ae <sbrk_aligned+0x26>
 80043a6:	f04f 34ff 	mov.w	r4, #4294967295
 80043aa:	4620      	mov	r0, r4
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
 80043ae:	1cc4      	adds	r4, r0, #3
 80043b0:	f024 0403 	bic.w	r4, r4, #3
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d0f8      	beq.n	80043aa <sbrk_aligned+0x22>
 80043b8:	1a21      	subs	r1, r4, r0
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 fb90 	bl	8004ae0 <_sbrk_r>
 80043c0:	3001      	adds	r0, #1
 80043c2:	d1f2      	bne.n	80043aa <sbrk_aligned+0x22>
 80043c4:	e7ef      	b.n	80043a6 <sbrk_aligned+0x1e>
 80043c6:	bf00      	nop
 80043c8:	20004248 	.word	0x20004248

080043cc <_malloc_r>:
 80043cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d0:	1ccd      	adds	r5, r1, #3
 80043d2:	f025 0503 	bic.w	r5, r5, #3
 80043d6:	3508      	adds	r5, #8
 80043d8:	2d0c      	cmp	r5, #12
 80043da:	bf38      	it	cc
 80043dc:	250c      	movcc	r5, #12
 80043de:	2d00      	cmp	r5, #0
 80043e0:	4606      	mov	r6, r0
 80043e2:	db01      	blt.n	80043e8 <_malloc_r+0x1c>
 80043e4:	42a9      	cmp	r1, r5
 80043e6:	d904      	bls.n	80043f2 <_malloc_r+0x26>
 80043e8:	230c      	movs	r3, #12
 80043ea:	6033      	str	r3, [r6, #0]
 80043ec:	2000      	movs	r0, #0
 80043ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044c8 <_malloc_r+0xfc>
 80043f6:	f000 f869 	bl	80044cc <__malloc_lock>
 80043fa:	f8d8 3000 	ldr.w	r3, [r8]
 80043fe:	461c      	mov	r4, r3
 8004400:	bb44      	cbnz	r4, 8004454 <_malloc_r+0x88>
 8004402:	4629      	mov	r1, r5
 8004404:	4630      	mov	r0, r6
 8004406:	f7ff ffbf 	bl	8004388 <sbrk_aligned>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	4604      	mov	r4, r0
 800440e:	d158      	bne.n	80044c2 <_malloc_r+0xf6>
 8004410:	f8d8 4000 	ldr.w	r4, [r8]
 8004414:	4627      	mov	r7, r4
 8004416:	2f00      	cmp	r7, #0
 8004418:	d143      	bne.n	80044a2 <_malloc_r+0xd6>
 800441a:	2c00      	cmp	r4, #0
 800441c:	d04b      	beq.n	80044b6 <_malloc_r+0xea>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	4639      	mov	r1, r7
 8004422:	4630      	mov	r0, r6
 8004424:	eb04 0903 	add.w	r9, r4, r3
 8004428:	f000 fb5a 	bl	8004ae0 <_sbrk_r>
 800442c:	4581      	cmp	r9, r0
 800442e:	d142      	bne.n	80044b6 <_malloc_r+0xea>
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	1a6d      	subs	r5, r5, r1
 8004434:	4629      	mov	r1, r5
 8004436:	4630      	mov	r0, r6
 8004438:	f7ff ffa6 	bl	8004388 <sbrk_aligned>
 800443c:	3001      	adds	r0, #1
 800443e:	d03a      	beq.n	80044b6 <_malloc_r+0xea>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	442b      	add	r3, r5
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	f8d8 3000 	ldr.w	r3, [r8]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	bb62      	cbnz	r2, 80044a8 <_malloc_r+0xdc>
 800444e:	f8c8 7000 	str.w	r7, [r8]
 8004452:	e00f      	b.n	8004474 <_malloc_r+0xa8>
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	1b52      	subs	r2, r2, r5
 8004458:	d420      	bmi.n	800449c <_malloc_r+0xd0>
 800445a:	2a0b      	cmp	r2, #11
 800445c:	d917      	bls.n	800448e <_malloc_r+0xc2>
 800445e:	1961      	adds	r1, r4, r5
 8004460:	42a3      	cmp	r3, r4
 8004462:	6025      	str	r5, [r4, #0]
 8004464:	bf18      	it	ne
 8004466:	6059      	strne	r1, [r3, #4]
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	bf08      	it	eq
 800446c:	f8c8 1000 	streq.w	r1, [r8]
 8004470:	5162      	str	r2, [r4, r5]
 8004472:	604b      	str	r3, [r1, #4]
 8004474:	4630      	mov	r0, r6
 8004476:	f000 f82f 	bl	80044d8 <__malloc_unlock>
 800447a:	f104 000b 	add.w	r0, r4, #11
 800447e:	1d23      	adds	r3, r4, #4
 8004480:	f020 0007 	bic.w	r0, r0, #7
 8004484:	1ac2      	subs	r2, r0, r3
 8004486:	bf1c      	itt	ne
 8004488:	1a1b      	subne	r3, r3, r0
 800448a:	50a3      	strne	r3, [r4, r2]
 800448c:	e7af      	b.n	80043ee <_malloc_r+0x22>
 800448e:	6862      	ldr	r2, [r4, #4]
 8004490:	42a3      	cmp	r3, r4
 8004492:	bf0c      	ite	eq
 8004494:	f8c8 2000 	streq.w	r2, [r8]
 8004498:	605a      	strne	r2, [r3, #4]
 800449a:	e7eb      	b.n	8004474 <_malloc_r+0xa8>
 800449c:	4623      	mov	r3, r4
 800449e:	6864      	ldr	r4, [r4, #4]
 80044a0:	e7ae      	b.n	8004400 <_malloc_r+0x34>
 80044a2:	463c      	mov	r4, r7
 80044a4:	687f      	ldr	r7, [r7, #4]
 80044a6:	e7b6      	b.n	8004416 <_malloc_r+0x4a>
 80044a8:	461a      	mov	r2, r3
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	d1fb      	bne.n	80044a8 <_malloc_r+0xdc>
 80044b0:	2300      	movs	r3, #0
 80044b2:	6053      	str	r3, [r2, #4]
 80044b4:	e7de      	b.n	8004474 <_malloc_r+0xa8>
 80044b6:	230c      	movs	r3, #12
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 f80c 	bl	80044d8 <__malloc_unlock>
 80044c0:	e794      	b.n	80043ec <_malloc_r+0x20>
 80044c2:	6005      	str	r5, [r0, #0]
 80044c4:	e7d6      	b.n	8004474 <_malloc_r+0xa8>
 80044c6:	bf00      	nop
 80044c8:	2000424c 	.word	0x2000424c

080044cc <__malloc_lock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	@ (80044d4 <__malloc_lock+0x8>)
 80044ce:	f7ff bf01 	b.w	80042d4 <__retarget_lock_acquire_recursive>
 80044d2:	bf00      	nop
 80044d4:	20004244 	.word	0x20004244

080044d8 <__malloc_unlock>:
 80044d8:	4801      	ldr	r0, [pc, #4]	@ (80044e0 <__malloc_unlock+0x8>)
 80044da:	f7ff befc 	b.w	80042d6 <__retarget_lock_release_recursive>
 80044de:	bf00      	nop
 80044e0:	20004244 	.word	0x20004244

080044e4 <__ssputs_r>:
 80044e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	688e      	ldr	r6, [r1, #8]
 80044ea:	461f      	mov	r7, r3
 80044ec:	42be      	cmp	r6, r7
 80044ee:	680b      	ldr	r3, [r1, #0]
 80044f0:	4682      	mov	sl, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	4690      	mov	r8, r2
 80044f6:	d82d      	bhi.n	8004554 <__ssputs_r+0x70>
 80044f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004500:	d026      	beq.n	8004550 <__ssputs_r+0x6c>
 8004502:	6965      	ldr	r5, [r4, #20]
 8004504:	6909      	ldr	r1, [r1, #16]
 8004506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800450a:	eba3 0901 	sub.w	r9, r3, r1
 800450e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004512:	1c7b      	adds	r3, r7, #1
 8004514:	444b      	add	r3, r9
 8004516:	106d      	asrs	r5, r5, #1
 8004518:	429d      	cmp	r5, r3
 800451a:	bf38      	it	cc
 800451c:	461d      	movcc	r5, r3
 800451e:	0553      	lsls	r3, r2, #21
 8004520:	d527      	bpl.n	8004572 <__ssputs_r+0x8e>
 8004522:	4629      	mov	r1, r5
 8004524:	f7ff ff52 	bl	80043cc <_malloc_r>
 8004528:	4606      	mov	r6, r0
 800452a:	b360      	cbz	r0, 8004586 <__ssputs_r+0xa2>
 800452c:	6921      	ldr	r1, [r4, #16]
 800452e:	464a      	mov	r2, r9
 8004530:	f7ff fed2 	bl	80042d8 <memcpy>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800453a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	6126      	str	r6, [r4, #16]
 8004542:	6165      	str	r5, [r4, #20]
 8004544:	444e      	add	r6, r9
 8004546:	eba5 0509 	sub.w	r5, r5, r9
 800454a:	6026      	str	r6, [r4, #0]
 800454c:	60a5      	str	r5, [r4, #8]
 800454e:	463e      	mov	r6, r7
 8004550:	42be      	cmp	r6, r7
 8004552:	d900      	bls.n	8004556 <__ssputs_r+0x72>
 8004554:	463e      	mov	r6, r7
 8004556:	6820      	ldr	r0, [r4, #0]
 8004558:	4632      	mov	r2, r6
 800455a:	4641      	mov	r1, r8
 800455c:	f000 faa6 	bl	8004aac <memmove>
 8004560:	68a3      	ldr	r3, [r4, #8]
 8004562:	1b9b      	subs	r3, r3, r6
 8004564:	60a3      	str	r3, [r4, #8]
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	4433      	add	r3, r6
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	2000      	movs	r0, #0
 800456e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004572:	462a      	mov	r2, r5
 8004574:	f000 fac4 	bl	8004b00 <_realloc_r>
 8004578:	4606      	mov	r6, r0
 800457a:	2800      	cmp	r0, #0
 800457c:	d1e0      	bne.n	8004540 <__ssputs_r+0x5c>
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	4650      	mov	r0, sl
 8004582:	f7ff feb7 	bl	80042f4 <_free_r>
 8004586:	230c      	movs	r3, #12
 8004588:	f8ca 3000 	str.w	r3, [sl]
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	e7e9      	b.n	800456e <__ssputs_r+0x8a>
	...

0800459c <_svfiprintf_r>:
 800459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a0:	4698      	mov	r8, r3
 80045a2:	898b      	ldrh	r3, [r1, #12]
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	b09d      	sub	sp, #116	@ 0x74
 80045a8:	4607      	mov	r7, r0
 80045aa:	460d      	mov	r5, r1
 80045ac:	4614      	mov	r4, r2
 80045ae:	d510      	bpl.n	80045d2 <_svfiprintf_r+0x36>
 80045b0:	690b      	ldr	r3, [r1, #16]
 80045b2:	b973      	cbnz	r3, 80045d2 <_svfiprintf_r+0x36>
 80045b4:	2140      	movs	r1, #64	@ 0x40
 80045b6:	f7ff ff09 	bl	80043cc <_malloc_r>
 80045ba:	6028      	str	r0, [r5, #0]
 80045bc:	6128      	str	r0, [r5, #16]
 80045be:	b930      	cbnz	r0, 80045ce <_svfiprintf_r+0x32>
 80045c0:	230c      	movs	r3, #12
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	b01d      	add	sp, #116	@ 0x74
 80045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ce:	2340      	movs	r3, #64	@ 0x40
 80045d0:	616b      	str	r3, [r5, #20]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d6:	2320      	movs	r3, #32
 80045d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e0:	2330      	movs	r3, #48	@ 0x30
 80045e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004780 <_svfiprintf_r+0x1e4>
 80045e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045ea:	f04f 0901 	mov.w	r9, #1
 80045ee:	4623      	mov	r3, r4
 80045f0:	469a      	mov	sl, r3
 80045f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f6:	b10a      	cbz	r2, 80045fc <_svfiprintf_r+0x60>
 80045f8:	2a25      	cmp	r2, #37	@ 0x25
 80045fa:	d1f9      	bne.n	80045f0 <_svfiprintf_r+0x54>
 80045fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004600:	d00b      	beq.n	800461a <_svfiprintf_r+0x7e>
 8004602:	465b      	mov	r3, fp
 8004604:	4622      	mov	r2, r4
 8004606:	4629      	mov	r1, r5
 8004608:	4638      	mov	r0, r7
 800460a:	f7ff ff6b 	bl	80044e4 <__ssputs_r>
 800460e:	3001      	adds	r0, #1
 8004610:	f000 80a7 	beq.w	8004762 <_svfiprintf_r+0x1c6>
 8004614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004616:	445a      	add	r2, fp
 8004618:	9209      	str	r2, [sp, #36]	@ 0x24
 800461a:	f89a 3000 	ldrb.w	r3, [sl]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 809f 	beq.w	8004762 <_svfiprintf_r+0x1c6>
 8004624:	2300      	movs	r3, #0
 8004626:	f04f 32ff 	mov.w	r2, #4294967295
 800462a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800462e:	f10a 0a01 	add.w	sl, sl, #1
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	9307      	str	r3, [sp, #28]
 8004636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800463a:	931a      	str	r3, [sp, #104]	@ 0x68
 800463c:	4654      	mov	r4, sl
 800463e:	2205      	movs	r2, #5
 8004640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004644:	484e      	ldr	r0, [pc, #312]	@ (8004780 <_svfiprintf_r+0x1e4>)
 8004646:	f7fb fdd3 	bl	80001f0 <memchr>
 800464a:	9a04      	ldr	r2, [sp, #16]
 800464c:	b9d8      	cbnz	r0, 8004686 <_svfiprintf_r+0xea>
 800464e:	06d0      	lsls	r0, r2, #27
 8004650:	bf44      	itt	mi
 8004652:	2320      	movmi	r3, #32
 8004654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004658:	0711      	lsls	r1, r2, #28
 800465a:	bf44      	itt	mi
 800465c:	232b      	movmi	r3, #43	@ 0x2b
 800465e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004662:	f89a 3000 	ldrb.w	r3, [sl]
 8004666:	2b2a      	cmp	r3, #42	@ 0x2a
 8004668:	d015      	beq.n	8004696 <_svfiprintf_r+0xfa>
 800466a:	9a07      	ldr	r2, [sp, #28]
 800466c:	4654      	mov	r4, sl
 800466e:	2000      	movs	r0, #0
 8004670:	f04f 0c0a 	mov.w	ip, #10
 8004674:	4621      	mov	r1, r4
 8004676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800467a:	3b30      	subs	r3, #48	@ 0x30
 800467c:	2b09      	cmp	r3, #9
 800467e:	d94b      	bls.n	8004718 <_svfiprintf_r+0x17c>
 8004680:	b1b0      	cbz	r0, 80046b0 <_svfiprintf_r+0x114>
 8004682:	9207      	str	r2, [sp, #28]
 8004684:	e014      	b.n	80046b0 <_svfiprintf_r+0x114>
 8004686:	eba0 0308 	sub.w	r3, r0, r8
 800468a:	fa09 f303 	lsl.w	r3, r9, r3
 800468e:	4313      	orrs	r3, r2
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	46a2      	mov	sl, r4
 8004694:	e7d2      	b.n	800463c <_svfiprintf_r+0xa0>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	1d19      	adds	r1, r3, #4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	9103      	str	r1, [sp, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bfbb      	ittet	lt
 80046a2:	425b      	neglt	r3, r3
 80046a4:	f042 0202 	orrlt.w	r2, r2, #2
 80046a8:	9307      	strge	r3, [sp, #28]
 80046aa:	9307      	strlt	r3, [sp, #28]
 80046ac:	bfb8      	it	lt
 80046ae:	9204      	strlt	r2, [sp, #16]
 80046b0:	7823      	ldrb	r3, [r4, #0]
 80046b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80046b4:	d10a      	bne.n	80046cc <_svfiprintf_r+0x130>
 80046b6:	7863      	ldrb	r3, [r4, #1]
 80046b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80046ba:	d132      	bne.n	8004722 <_svfiprintf_r+0x186>
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	1d1a      	adds	r2, r3, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	9203      	str	r2, [sp, #12]
 80046c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046c8:	3402      	adds	r4, #2
 80046ca:	9305      	str	r3, [sp, #20]
 80046cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004790 <_svfiprintf_r+0x1f4>
 80046d0:	7821      	ldrb	r1, [r4, #0]
 80046d2:	2203      	movs	r2, #3
 80046d4:	4650      	mov	r0, sl
 80046d6:	f7fb fd8b 	bl	80001f0 <memchr>
 80046da:	b138      	cbz	r0, 80046ec <_svfiprintf_r+0x150>
 80046dc:	9b04      	ldr	r3, [sp, #16]
 80046de:	eba0 000a 	sub.w	r0, r0, sl
 80046e2:	2240      	movs	r2, #64	@ 0x40
 80046e4:	4082      	lsls	r2, r0
 80046e6:	4313      	orrs	r3, r2
 80046e8:	3401      	adds	r4, #1
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f0:	4824      	ldr	r0, [pc, #144]	@ (8004784 <_svfiprintf_r+0x1e8>)
 80046f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046f6:	2206      	movs	r2, #6
 80046f8:	f7fb fd7a 	bl	80001f0 <memchr>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d036      	beq.n	800476e <_svfiprintf_r+0x1d2>
 8004700:	4b21      	ldr	r3, [pc, #132]	@ (8004788 <_svfiprintf_r+0x1ec>)
 8004702:	bb1b      	cbnz	r3, 800474c <_svfiprintf_r+0x1b0>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	3307      	adds	r3, #7
 8004708:	f023 0307 	bic.w	r3, r3, #7
 800470c:	3308      	adds	r3, #8
 800470e:	9303      	str	r3, [sp, #12]
 8004710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004712:	4433      	add	r3, r6
 8004714:	9309      	str	r3, [sp, #36]	@ 0x24
 8004716:	e76a      	b.n	80045ee <_svfiprintf_r+0x52>
 8004718:	fb0c 3202 	mla	r2, ip, r2, r3
 800471c:	460c      	mov	r4, r1
 800471e:	2001      	movs	r0, #1
 8004720:	e7a8      	b.n	8004674 <_svfiprintf_r+0xd8>
 8004722:	2300      	movs	r3, #0
 8004724:	3401      	adds	r4, #1
 8004726:	9305      	str	r3, [sp, #20]
 8004728:	4619      	mov	r1, r3
 800472a:	f04f 0c0a 	mov.w	ip, #10
 800472e:	4620      	mov	r0, r4
 8004730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004734:	3a30      	subs	r2, #48	@ 0x30
 8004736:	2a09      	cmp	r2, #9
 8004738:	d903      	bls.n	8004742 <_svfiprintf_r+0x1a6>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0c6      	beq.n	80046cc <_svfiprintf_r+0x130>
 800473e:	9105      	str	r1, [sp, #20]
 8004740:	e7c4      	b.n	80046cc <_svfiprintf_r+0x130>
 8004742:	fb0c 2101 	mla	r1, ip, r1, r2
 8004746:	4604      	mov	r4, r0
 8004748:	2301      	movs	r3, #1
 800474a:	e7f0      	b.n	800472e <_svfiprintf_r+0x192>
 800474c:	ab03      	add	r3, sp, #12
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	462a      	mov	r2, r5
 8004752:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <_svfiprintf_r+0x1f0>)
 8004754:	a904      	add	r1, sp, #16
 8004756:	4638      	mov	r0, r7
 8004758:	f3af 8000 	nop.w
 800475c:	1c42      	adds	r2, r0, #1
 800475e:	4606      	mov	r6, r0
 8004760:	d1d6      	bne.n	8004710 <_svfiprintf_r+0x174>
 8004762:	89ab      	ldrh	r3, [r5, #12]
 8004764:	065b      	lsls	r3, r3, #25
 8004766:	f53f af2d 	bmi.w	80045c4 <_svfiprintf_r+0x28>
 800476a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800476c:	e72c      	b.n	80045c8 <_svfiprintf_r+0x2c>
 800476e:	ab03      	add	r3, sp, #12
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	462a      	mov	r2, r5
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <_svfiprintf_r+0x1f0>)
 8004776:	a904      	add	r1, sp, #16
 8004778:	4638      	mov	r0, r7
 800477a:	f000 f879 	bl	8004870 <_printf_i>
 800477e:	e7ed      	b.n	800475c <_svfiprintf_r+0x1c0>
 8004780:	08004c40 	.word	0x08004c40
 8004784:	08004c4a 	.word	0x08004c4a
 8004788:	00000000 	.word	0x00000000
 800478c:	080044e5 	.word	0x080044e5
 8004790:	08004c46 	.word	0x08004c46

08004794 <_printf_common>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	4616      	mov	r6, r2
 800479a:	4698      	mov	r8, r3
 800479c:	688a      	ldr	r2, [r1, #8]
 800479e:	690b      	ldr	r3, [r1, #16]
 80047a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047a4:	4293      	cmp	r3, r2
 80047a6:	bfb8      	it	lt
 80047a8:	4613      	movlt	r3, r2
 80047aa:	6033      	str	r3, [r6, #0]
 80047ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047b0:	4607      	mov	r7, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	b10a      	cbz	r2, 80047ba <_printf_common+0x26>
 80047b6:	3301      	adds	r3, #1
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	0699      	lsls	r1, r3, #26
 80047be:	bf42      	ittt	mi
 80047c0:	6833      	ldrmi	r3, [r6, #0]
 80047c2:	3302      	addmi	r3, #2
 80047c4:	6033      	strmi	r3, [r6, #0]
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	f015 0506 	ands.w	r5, r5, #6
 80047cc:	d106      	bne.n	80047dc <_printf_common+0x48>
 80047ce:	f104 0a19 	add.w	sl, r4, #25
 80047d2:	68e3      	ldr	r3, [r4, #12]
 80047d4:	6832      	ldr	r2, [r6, #0]
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	42ab      	cmp	r3, r5
 80047da:	dc26      	bgt.n	800482a <_printf_common+0x96>
 80047dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	3b00      	subs	r3, #0
 80047e4:	bf18      	it	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	0692      	lsls	r2, r2, #26
 80047ea:	d42b      	bmi.n	8004844 <_printf_common+0xb0>
 80047ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047f0:	4641      	mov	r1, r8
 80047f2:	4638      	mov	r0, r7
 80047f4:	47c8      	blx	r9
 80047f6:	3001      	adds	r0, #1
 80047f8:	d01e      	beq.n	8004838 <_printf_common+0xa4>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	6922      	ldr	r2, [r4, #16]
 80047fe:	f003 0306 	and.w	r3, r3, #6
 8004802:	2b04      	cmp	r3, #4
 8004804:	bf02      	ittt	eq
 8004806:	68e5      	ldreq	r5, [r4, #12]
 8004808:	6833      	ldreq	r3, [r6, #0]
 800480a:	1aed      	subeq	r5, r5, r3
 800480c:	68a3      	ldr	r3, [r4, #8]
 800480e:	bf0c      	ite	eq
 8004810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004814:	2500      	movne	r5, #0
 8004816:	4293      	cmp	r3, r2
 8004818:	bfc4      	itt	gt
 800481a:	1a9b      	subgt	r3, r3, r2
 800481c:	18ed      	addgt	r5, r5, r3
 800481e:	2600      	movs	r6, #0
 8004820:	341a      	adds	r4, #26
 8004822:	42b5      	cmp	r5, r6
 8004824:	d11a      	bne.n	800485c <_printf_common+0xc8>
 8004826:	2000      	movs	r0, #0
 8004828:	e008      	b.n	800483c <_printf_common+0xa8>
 800482a:	2301      	movs	r3, #1
 800482c:	4652      	mov	r2, sl
 800482e:	4641      	mov	r1, r8
 8004830:	4638      	mov	r0, r7
 8004832:	47c8      	blx	r9
 8004834:	3001      	adds	r0, #1
 8004836:	d103      	bne.n	8004840 <_printf_common+0xac>
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	3501      	adds	r5, #1
 8004842:	e7c6      	b.n	80047d2 <_printf_common+0x3e>
 8004844:	18e1      	adds	r1, r4, r3
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	2030      	movs	r0, #48	@ 0x30
 800484a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800484e:	4422      	add	r2, r4
 8004850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004858:	3302      	adds	r3, #2
 800485a:	e7c7      	b.n	80047ec <_printf_common+0x58>
 800485c:	2301      	movs	r3, #1
 800485e:	4622      	mov	r2, r4
 8004860:	4641      	mov	r1, r8
 8004862:	4638      	mov	r0, r7
 8004864:	47c8      	blx	r9
 8004866:	3001      	adds	r0, #1
 8004868:	d0e6      	beq.n	8004838 <_printf_common+0xa4>
 800486a:	3601      	adds	r6, #1
 800486c:	e7d9      	b.n	8004822 <_printf_common+0x8e>
	...

08004870 <_printf_i>:
 8004870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	7e0f      	ldrb	r7, [r1, #24]
 8004876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004878:	2f78      	cmp	r7, #120	@ 0x78
 800487a:	4691      	mov	r9, r2
 800487c:	4680      	mov	r8, r0
 800487e:	460c      	mov	r4, r1
 8004880:	469a      	mov	sl, r3
 8004882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004886:	d807      	bhi.n	8004898 <_printf_i+0x28>
 8004888:	2f62      	cmp	r7, #98	@ 0x62
 800488a:	d80a      	bhi.n	80048a2 <_printf_i+0x32>
 800488c:	2f00      	cmp	r7, #0
 800488e:	f000 80d1 	beq.w	8004a34 <_printf_i+0x1c4>
 8004892:	2f58      	cmp	r7, #88	@ 0x58
 8004894:	f000 80b8 	beq.w	8004a08 <_printf_i+0x198>
 8004898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800489c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048a0:	e03a      	b.n	8004918 <_printf_i+0xa8>
 80048a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048a6:	2b15      	cmp	r3, #21
 80048a8:	d8f6      	bhi.n	8004898 <_printf_i+0x28>
 80048aa:	a101      	add	r1, pc, #4	@ (adr r1, 80048b0 <_printf_i+0x40>)
 80048ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b0:	08004909 	.word	0x08004909
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	08004899 	.word	0x08004899
 80048bc:	08004899 	.word	0x08004899
 80048c0:	08004899 	.word	0x08004899
 80048c4:	08004899 	.word	0x08004899
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	08004899 	.word	0x08004899
 80048d0:	08004899 	.word	0x08004899
 80048d4:	08004899 	.word	0x08004899
 80048d8:	08004899 	.word	0x08004899
 80048dc:	08004a1b 	.word	0x08004a1b
 80048e0:	08004947 	.word	0x08004947
 80048e4:	080049d5 	.word	0x080049d5
 80048e8:	08004899 	.word	0x08004899
 80048ec:	08004899 	.word	0x08004899
 80048f0:	08004a3d 	.word	0x08004a3d
 80048f4:	08004899 	.word	0x08004899
 80048f8:	08004947 	.word	0x08004947
 80048fc:	08004899 	.word	0x08004899
 8004900:	08004899 	.word	0x08004899
 8004904:	080049dd 	.word	0x080049dd
 8004908:	6833      	ldr	r3, [r6, #0]
 800490a:	1d1a      	adds	r2, r3, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6032      	str	r2, [r6, #0]
 8004910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004918:	2301      	movs	r3, #1
 800491a:	e09c      	b.n	8004a56 <_printf_i+0x1e6>
 800491c:	6833      	ldr	r3, [r6, #0]
 800491e:	6820      	ldr	r0, [r4, #0]
 8004920:	1d19      	adds	r1, r3, #4
 8004922:	6031      	str	r1, [r6, #0]
 8004924:	0606      	lsls	r6, r0, #24
 8004926:	d501      	bpl.n	800492c <_printf_i+0xbc>
 8004928:	681d      	ldr	r5, [r3, #0]
 800492a:	e003      	b.n	8004934 <_printf_i+0xc4>
 800492c:	0645      	lsls	r5, r0, #25
 800492e:	d5fb      	bpl.n	8004928 <_printf_i+0xb8>
 8004930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004934:	2d00      	cmp	r5, #0
 8004936:	da03      	bge.n	8004940 <_printf_i+0xd0>
 8004938:	232d      	movs	r3, #45	@ 0x2d
 800493a:	426d      	negs	r5, r5
 800493c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004940:	4858      	ldr	r0, [pc, #352]	@ (8004aa4 <_printf_i+0x234>)
 8004942:	230a      	movs	r3, #10
 8004944:	e011      	b.n	800496a <_printf_i+0xfa>
 8004946:	6821      	ldr	r1, [r4, #0]
 8004948:	6833      	ldr	r3, [r6, #0]
 800494a:	0608      	lsls	r0, r1, #24
 800494c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004950:	d402      	bmi.n	8004958 <_printf_i+0xe8>
 8004952:	0649      	lsls	r1, r1, #25
 8004954:	bf48      	it	mi
 8004956:	b2ad      	uxthmi	r5, r5
 8004958:	2f6f      	cmp	r7, #111	@ 0x6f
 800495a:	4852      	ldr	r0, [pc, #328]	@ (8004aa4 <_printf_i+0x234>)
 800495c:	6033      	str	r3, [r6, #0]
 800495e:	bf14      	ite	ne
 8004960:	230a      	movne	r3, #10
 8004962:	2308      	moveq	r3, #8
 8004964:	2100      	movs	r1, #0
 8004966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800496a:	6866      	ldr	r6, [r4, #4]
 800496c:	60a6      	str	r6, [r4, #8]
 800496e:	2e00      	cmp	r6, #0
 8004970:	db05      	blt.n	800497e <_printf_i+0x10e>
 8004972:	6821      	ldr	r1, [r4, #0]
 8004974:	432e      	orrs	r6, r5
 8004976:	f021 0104 	bic.w	r1, r1, #4
 800497a:	6021      	str	r1, [r4, #0]
 800497c:	d04b      	beq.n	8004a16 <_printf_i+0x1a6>
 800497e:	4616      	mov	r6, r2
 8004980:	fbb5 f1f3 	udiv	r1, r5, r3
 8004984:	fb03 5711 	mls	r7, r3, r1, r5
 8004988:	5dc7      	ldrb	r7, [r0, r7]
 800498a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800498e:	462f      	mov	r7, r5
 8004990:	42bb      	cmp	r3, r7
 8004992:	460d      	mov	r5, r1
 8004994:	d9f4      	bls.n	8004980 <_printf_i+0x110>
 8004996:	2b08      	cmp	r3, #8
 8004998:	d10b      	bne.n	80049b2 <_printf_i+0x142>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	07df      	lsls	r7, r3, #31
 800499e:	d508      	bpl.n	80049b2 <_printf_i+0x142>
 80049a0:	6923      	ldr	r3, [r4, #16]
 80049a2:	6861      	ldr	r1, [r4, #4]
 80049a4:	4299      	cmp	r1, r3
 80049a6:	bfde      	ittt	le
 80049a8:	2330      	movle	r3, #48	@ 0x30
 80049aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049b2:	1b92      	subs	r2, r2, r6
 80049b4:	6122      	str	r2, [r4, #16]
 80049b6:	f8cd a000 	str.w	sl, [sp]
 80049ba:	464b      	mov	r3, r9
 80049bc:	aa03      	add	r2, sp, #12
 80049be:	4621      	mov	r1, r4
 80049c0:	4640      	mov	r0, r8
 80049c2:	f7ff fee7 	bl	8004794 <_printf_common>
 80049c6:	3001      	adds	r0, #1
 80049c8:	d14a      	bne.n	8004a60 <_printf_i+0x1f0>
 80049ca:	f04f 30ff 	mov.w	r0, #4294967295
 80049ce:	b004      	add	sp, #16
 80049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	f043 0320 	orr.w	r3, r3, #32
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	4832      	ldr	r0, [pc, #200]	@ (8004aa8 <_printf_i+0x238>)
 80049de:	2778      	movs	r7, #120	@ 0x78
 80049e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	6831      	ldr	r1, [r6, #0]
 80049e8:	061f      	lsls	r7, r3, #24
 80049ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80049ee:	d402      	bmi.n	80049f6 <_printf_i+0x186>
 80049f0:	065f      	lsls	r7, r3, #25
 80049f2:	bf48      	it	mi
 80049f4:	b2ad      	uxthmi	r5, r5
 80049f6:	6031      	str	r1, [r6, #0]
 80049f8:	07d9      	lsls	r1, r3, #31
 80049fa:	bf44      	itt	mi
 80049fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004a00:	6023      	strmi	r3, [r4, #0]
 8004a02:	b11d      	cbz	r5, 8004a0c <_printf_i+0x19c>
 8004a04:	2310      	movs	r3, #16
 8004a06:	e7ad      	b.n	8004964 <_printf_i+0xf4>
 8004a08:	4826      	ldr	r0, [pc, #152]	@ (8004aa4 <_printf_i+0x234>)
 8004a0a:	e7e9      	b.n	80049e0 <_printf_i+0x170>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f023 0320 	bic.w	r3, r3, #32
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	e7f6      	b.n	8004a04 <_printf_i+0x194>
 8004a16:	4616      	mov	r6, r2
 8004a18:	e7bd      	b.n	8004996 <_printf_i+0x126>
 8004a1a:	6833      	ldr	r3, [r6, #0]
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	6961      	ldr	r1, [r4, #20]
 8004a20:	1d18      	adds	r0, r3, #4
 8004a22:	6030      	str	r0, [r6, #0]
 8004a24:	062e      	lsls	r6, r5, #24
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	d501      	bpl.n	8004a2e <_printf_i+0x1be>
 8004a2a:	6019      	str	r1, [r3, #0]
 8004a2c:	e002      	b.n	8004a34 <_printf_i+0x1c4>
 8004a2e:	0668      	lsls	r0, r5, #25
 8004a30:	d5fb      	bpl.n	8004a2a <_printf_i+0x1ba>
 8004a32:	8019      	strh	r1, [r3, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	6123      	str	r3, [r4, #16]
 8004a38:	4616      	mov	r6, r2
 8004a3a:	e7bc      	b.n	80049b6 <_printf_i+0x146>
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	1d1a      	adds	r2, r3, #4
 8004a40:	6032      	str	r2, [r6, #0]
 8004a42:	681e      	ldr	r6, [r3, #0]
 8004a44:	6862      	ldr	r2, [r4, #4]
 8004a46:	2100      	movs	r1, #0
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7fb fbd1 	bl	80001f0 <memchr>
 8004a4e:	b108      	cbz	r0, 8004a54 <_printf_i+0x1e4>
 8004a50:	1b80      	subs	r0, r0, r6
 8004a52:	6060      	str	r0, [r4, #4]
 8004a54:	6863      	ldr	r3, [r4, #4]
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a5e:	e7aa      	b.n	80049b6 <_printf_i+0x146>
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	4632      	mov	r2, r6
 8004a64:	4649      	mov	r1, r9
 8004a66:	4640      	mov	r0, r8
 8004a68:	47d0      	blx	sl
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d0ad      	beq.n	80049ca <_printf_i+0x15a>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	079b      	lsls	r3, r3, #30
 8004a72:	d413      	bmi.n	8004a9c <_printf_i+0x22c>
 8004a74:	68e0      	ldr	r0, [r4, #12]
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	4298      	cmp	r0, r3
 8004a7a:	bfb8      	it	lt
 8004a7c:	4618      	movlt	r0, r3
 8004a7e:	e7a6      	b.n	80049ce <_printf_i+0x15e>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4632      	mov	r2, r6
 8004a84:	4649      	mov	r1, r9
 8004a86:	4640      	mov	r0, r8
 8004a88:	47d0      	blx	sl
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d09d      	beq.n	80049ca <_printf_i+0x15a>
 8004a8e:	3501      	adds	r5, #1
 8004a90:	68e3      	ldr	r3, [r4, #12]
 8004a92:	9903      	ldr	r1, [sp, #12]
 8004a94:	1a5b      	subs	r3, r3, r1
 8004a96:	42ab      	cmp	r3, r5
 8004a98:	dcf2      	bgt.n	8004a80 <_printf_i+0x210>
 8004a9a:	e7eb      	b.n	8004a74 <_printf_i+0x204>
 8004a9c:	2500      	movs	r5, #0
 8004a9e:	f104 0619 	add.w	r6, r4, #25
 8004aa2:	e7f5      	b.n	8004a90 <_printf_i+0x220>
 8004aa4:	08004c51 	.word	0x08004c51
 8004aa8:	08004c62 	.word	0x08004c62

08004aac <memmove>:
 8004aac:	4288      	cmp	r0, r1
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	eb01 0402 	add.w	r4, r1, r2
 8004ab4:	d902      	bls.n	8004abc <memmove+0x10>
 8004ab6:	4284      	cmp	r4, r0
 8004ab8:	4623      	mov	r3, r4
 8004aba:	d807      	bhi.n	8004acc <memmove+0x20>
 8004abc:	1e43      	subs	r3, r0, #1
 8004abe:	42a1      	cmp	r1, r4
 8004ac0:	d008      	beq.n	8004ad4 <memmove+0x28>
 8004ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aca:	e7f8      	b.n	8004abe <memmove+0x12>
 8004acc:	4402      	add	r2, r0
 8004ace:	4601      	mov	r1, r0
 8004ad0:	428a      	cmp	r2, r1
 8004ad2:	d100      	bne.n	8004ad6 <memmove+0x2a>
 8004ad4:	bd10      	pop	{r4, pc}
 8004ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ade:	e7f7      	b.n	8004ad0 <memmove+0x24>

08004ae0 <_sbrk_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	4d06      	ldr	r5, [pc, #24]	@ (8004afc <_sbrk_r+0x1c>)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	f7fc f954 	bl	8000d98 <_sbrk>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_sbrk_r+0x1a>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_sbrk_r+0x1a>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	20004240 	.word	0x20004240

08004b00 <_realloc_r>:
 8004b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b04:	4607      	mov	r7, r0
 8004b06:	4614      	mov	r4, r2
 8004b08:	460d      	mov	r5, r1
 8004b0a:	b921      	cbnz	r1, 8004b16 <_realloc_r+0x16>
 8004b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b10:	4611      	mov	r1, r2
 8004b12:	f7ff bc5b 	b.w	80043cc <_malloc_r>
 8004b16:	b92a      	cbnz	r2, 8004b24 <_realloc_r+0x24>
 8004b18:	f7ff fbec 	bl	80042f4 <_free_r>
 8004b1c:	4625      	mov	r5, r4
 8004b1e:	4628      	mov	r0, r5
 8004b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b24:	f000 f81a 	bl	8004b5c <_malloc_usable_size_r>
 8004b28:	4284      	cmp	r4, r0
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	d802      	bhi.n	8004b34 <_realloc_r+0x34>
 8004b2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b32:	d8f4      	bhi.n	8004b1e <_realloc_r+0x1e>
 8004b34:	4621      	mov	r1, r4
 8004b36:	4638      	mov	r0, r7
 8004b38:	f7ff fc48 	bl	80043cc <_malloc_r>
 8004b3c:	4680      	mov	r8, r0
 8004b3e:	b908      	cbnz	r0, 8004b44 <_realloc_r+0x44>
 8004b40:	4645      	mov	r5, r8
 8004b42:	e7ec      	b.n	8004b1e <_realloc_r+0x1e>
 8004b44:	42b4      	cmp	r4, r6
 8004b46:	4622      	mov	r2, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	bf28      	it	cs
 8004b4c:	4632      	movcs	r2, r6
 8004b4e:	f7ff fbc3 	bl	80042d8 <memcpy>
 8004b52:	4629      	mov	r1, r5
 8004b54:	4638      	mov	r0, r7
 8004b56:	f7ff fbcd 	bl	80042f4 <_free_r>
 8004b5a:	e7f1      	b.n	8004b40 <_realloc_r+0x40>

08004b5c <_malloc_usable_size_r>:
 8004b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b60:	1f18      	subs	r0, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfbc      	itt	lt
 8004b66:	580b      	ldrlt	r3, [r1, r0]
 8004b68:	18c0      	addlt	r0, r0, r3
 8004b6a:	4770      	bx	lr

08004b6c <_init>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr

08004b78 <_fini>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr
